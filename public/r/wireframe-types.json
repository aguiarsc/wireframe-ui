{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wireframe-types",
  "type": "registry:lib",
  "title": "Wireframe Types",
  "description": "TypeScript type definitions for wireframe components.",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/lib/wireframe-types.ts",
      "content": "/**\r\n * Wireframe Type Definitions\r\n *\r\n * TypeScript type definitions for wireframe components.\r\n * These types are used across the wireframe-ui component library.\r\n */\r\n\r\nimport type { VariantProps } from 'class-variance-authority'\r\nimport type React from 'react'\r\n\r\n/**\r\n * Size variants for wireframe elements\r\n */\r\nexport type WireframeSize = 'xs' | 'sm' | 'base' | 'lg' | 'xl'\r\n\r\n/**\r\n * Width variants for wireframe elements\r\n */\r\nexport type WireframeWidth = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full'\r\n\r\n/**\r\n * Color variants for wireframe elements\r\n */\r\nexport type WireframeColor = 'default' | 'muted' | 'subtle' | 'primary' | 'secondary' | 'accent'\r\n\r\n/**\r\n * Animation variants for wireframe elements\r\n */\r\nexport type WireframeAnimation = 'none' | 'pulse' | 'shimmer' | 'typing'\r\n\r\n/**\r\n * Emphasis hierarchy for wireframe elements\r\n * Provides visual weight without relying on semantic color meanings\r\n */\r\nexport type WireframeEmphasis = 'primary' | 'secondary' | 'tertiary' | 'subtle'\r\n\r\n/**\r\n * Spacing variants for composition components\r\n */\r\nexport type WireframeSpacing = 'tight' | 'normal' | 'relaxed'\r\n\r\n/**\r\n * Direction variants for layout components\r\n */\r\nexport type WireframeDirection = 'vertical' | 'horizontal'\r\n\r\n/**\r\n * Breakpoint keys for responsive utilities\r\n */\r\nexport type Breakpoint = 'base' | 'sm' | 'md' | 'lg' | 'xl'\r\n\r\n/**\r\n * Runtime constant arrays for variant types\r\n * Useful for validation and iteration\r\n */\r\nexport const WIREFRAME_SIZES = ['xs', 'sm', 'base', 'lg', 'xl'] as const\r\nexport const WIREFRAME_WIDTHS = ['xs', 'sm', 'md', 'lg', 'xl', 'full'] as const\r\nexport const WIREFRAME_COLORS = [\r\n  'default',\r\n  'muted',\r\n  'subtle',\r\n  'primary',\r\n  'secondary',\r\n  'accent',\r\n] as const\r\nexport const WIREFRAME_ANIMATIONS = ['none', 'pulse', 'shimmer', 'typing'] as const\r\nexport const WIREFRAME_EMPHASIS = ['primary', 'secondary', 'tertiary', 'subtle'] as const\r\n\r\n/**\r\n * Responsive props interface for breakpoint-based styling\r\n * Allows components to accept different prop values at different breakpoints\r\n *\r\n * @example\r\n * ```tsx\r\n * <Text responsive={{ base: { size: 'sm' }, md: { size: 'lg' } }} />\r\n * ```\r\n */\r\nexport interface ResponsiveProps<T extends Record<string, unknown>> {\r\n  base?: Partial<T>\r\n  sm?: Partial<T>\r\n  md?: Partial<T>\r\n  lg?: Partial<T>\r\n  xl?: Partial<T>\r\n}\r\n\r\n/**\r\n * Helper type for creating responsive prop values\r\n * Allows a value to be either a direct value or a responsive object\r\n */\r\nexport type ResponsiveValue<T> = T | ResponsiveProps<Record<string, T>>\r\n\r\n/**\r\n * Responsive size props interface\r\n */\r\nexport interface ResponsiveSizeProps {\r\n  size?: WireframeSize\r\n}\r\n\r\n/**\r\n * Responsive width props interface\r\n */\r\nexport interface ResponsiveWidthProps {\r\n  width?: WireframeWidth\r\n}\r\n\r\n/**\r\n * Responsive dimension props interface\r\n * Combines size and width props\r\n */\r\nexport interface ResponsiveDimensionProps extends ResponsiveSizeProps, ResponsiveWidthProps {}\r\n\r\n/**\r\n * Extract variant props from CVA variant function\r\n */\r\nexport type ExtractVariantProps<T> = T extends (...args: any[]) => any ? VariantProps<T> : never\r\n\r\n/**\r\n * Merge two prop types, with the second type taking precedence\r\n */\r\nexport type MergeProps<T, U> = Omit<T, keyof U> & U\r\n\r\n/**\r\n * Make specific properties optional\r\n */\r\nexport type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\r\n\r\n/**\r\n * Make specific properties required\r\n */\r\nexport type WithRequired<T, K extends keyof T> = T & Required<Pick<T, K>>\r\n\r\n/**\r\n * Polymorphic component props\r\n * Allows components to render as different elements via the 'as' prop\r\n */\r\nexport type PolymorphicProps<E extends React.ElementType, P = {}> = P &\r\n  Omit<React.ComponentPropsWithoutRef<E>, keyof P> & {\r\n    as?: E\r\n  }\r\n\r\n/**\r\n * Type guard to check if a value is a valid WireframeSize\r\n */\r\nexport function isWireframeSize(value: unknown): value is WireframeSize {\r\n  return typeof value === 'string' && WIREFRAME_SIZES.includes(value as WireframeSize)\r\n}\r\n\r\n/**\r\n * Type guard to check if a value is a valid Breakpoint\r\n */\r\nexport function isBreakpoint(value: unknown): value is Breakpoint {\r\n  return typeof value === 'string' && ['base', 'sm', 'md', 'lg', 'xl'].includes(value)\r\n}\r\n",
      "type": "registry:lib"
    }
  ]
}