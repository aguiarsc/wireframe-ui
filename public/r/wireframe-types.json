{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wireframe-types",
  "type": "registry:lib",
  "title": "Wireframe Types",
  "description": "TypeScript type definitions for wireframe components.",
  "dependencies": ["class-variance-authority"],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/lib/wireframe-types.ts",
      "content": "/**\n * Wireframe Type Definitions\n *\n * TypeScript type definitions for wireframe components.\n * These types are used across the wireframe-ui component library.\n */\n\nimport type { VariantProps } from 'class-variance-authority'\nimport type React from 'react'\n\n/**\n * Size variants for wireframe elements\n */\nexport type WireframeSize = 'xs' | 'sm' | 'base' | 'lg' | 'xl'\n\n/**\n * Width variants for wireframe elements\n */\nexport type WireframeWidth = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full'\n\n/**\n * Color variants for wireframe elements\n */\nexport type WireframeColor = 'default' | 'muted' | 'subtle' | 'primary' | 'secondary' | 'accent'\n\n/**\n * Animation variants for wireframe elements\n */\nexport type WireframeAnimation = 'none' | 'pulse' | 'shimmer' | 'typing'\n\n/**\n * Emphasis hierarchy for wireframe elements\n * Provides visual weight without relying on semantic color meanings\n */\nexport type WireframeEmphasis = 'primary' | 'secondary' | 'tertiary' | 'subtle'\n\n/**\n * Spacing variants for composition components\n */\nexport type WireframeSpacing = 'tight' | 'normal' | 'relaxed'\n\n/**\n * Direction variants for layout components\n */\nexport type WireframeDirection = 'vertical' | 'horizontal'\n\n/**\n * Breakpoint keys for responsive utilities\n */\nexport type Breakpoint = 'base' | 'sm' | 'md' | 'lg' | 'xl'\n\n/**\n * Runtime constant arrays for variant types\n * Useful for validation and iteration\n */\nexport const WIREFRAME_SIZES = ['xs', 'sm', 'base', 'lg', 'xl'] as const\nexport const WIREFRAME_WIDTHS = ['xs', 'sm', 'md', 'lg', 'xl', 'full'] as const\nexport const WIREFRAME_COLORS = [\n  'default',\n  'muted',\n  'subtle',\n  'primary',\n  'secondary',\n  'accent',\n] as const\nexport const WIREFRAME_ANIMATIONS = ['none', 'pulse', 'shimmer', 'typing'] as const\nexport const WIREFRAME_EMPHASIS = ['primary', 'secondary', 'tertiary', 'subtle'] as const\n\n/**\n * Responsive props interface for breakpoint-based styling\n * Allows components to accept different prop values at different breakpoints\n *\n * @example\n * ```tsx\n * <Text responsive={{ base: { size: 'sm' }, md: { size: 'lg' } }} />\n * ```\n */\nexport interface ResponsiveProps<T extends Record<string, unknown>> {\n  base?: Partial<T>\n  sm?: Partial<T>\n  md?: Partial<T>\n  lg?: Partial<T>\n  xl?: Partial<T>\n}\n\n/**\n * Helper type for creating responsive prop values\n * Allows a value to be either a direct value or a responsive object\n */\nexport type ResponsiveValue<T> = T | ResponsiveProps<Record<string, T>>\n\n/**\n * Responsive size props interface\n */\nexport interface ResponsiveSizeProps {\n  size?: WireframeSize\n}\n\n/**\n * Responsive width props interface\n */\nexport interface ResponsiveWidthProps {\n  width?: WireframeWidth\n}\n\n/**\n * Responsive dimension props interface\n * Combines size and width props\n */\nexport interface ResponsiveDimensionProps extends ResponsiveSizeProps, ResponsiveWidthProps {}\n\n/**\n * Extract variant props from CVA variant function\n */\nexport type ExtractVariantProps<T> = T extends (...args: any[]) => any ? VariantProps<T> : never\n\n/**\n * Merge two prop types, with the second type taking precedence\n */\nexport type MergeProps<T, U> = Omit<T, keyof U> & U\n\n/**\n * Make specific properties optional\n */\nexport type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\n/**\n * Make specific properties required\n */\nexport type WithRequired<T, K extends keyof T> = T & Required<Pick<T, K>>\n\n/**\n * Polymorphic component props\n * Allows components to render as different elements via the 'as' prop\n */\nexport type PolymorphicProps<E extends React.ElementType, P = {}> = P &\n  Omit<React.ComponentPropsWithoutRef<E>, keyof P> & {\n    as?: E\n  }\n\n/**\n * Type guard to check if a value is a valid WireframeSize\n */\nexport function isWireframeSize(value: unknown): value is WireframeSize {\n  return typeof value === 'string' && WIREFRAME_SIZES.includes(value as WireframeSize)\n}\n\n/**\n * Type guard to check if a value is a valid Breakpoint\n */\nexport function isBreakpoint(value: unknown): value is Breakpoint {\n  return typeof value === 'string' && ['base', 'sm', 'md', 'lg', 'xl'].includes(value)\n}\n",
      "type": "registry:lib"
    }
  ]
}
