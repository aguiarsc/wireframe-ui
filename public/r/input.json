{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "title": "Input",
  "description": "A text input field with support for various types and validation states.",
  "dependencies": [],
  "registryDependencies": ["icons"],
  "files": [
    {
      "path": "registry/new-york/ui/input.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { cn } from '@/lib/utils'\nimport { AlignCenterIcon } from '@/registry/new-york/icons'\n\n/**\n * Default maximum length for skeleton input text\n */\nconst DEFAULT_SKELETON_MAX_LENGTH = 20\n\n/**\n * Width calculation thresholds for skeleton input\n */\nconst WIDTH_THRESHOLD_SMALL = 5\nconst WIDTH_THRESHOLD_MEDIUM = 10\nconst WIDTH_THRESHOLD_LARGE = 15\n\nexport interface InputProps extends React.ComponentProps<'input'> {\n  /**\n   * Visual variant of the input\n   * @default 'default'\n   */\n  variant?: 'default' | 'wireframe'\n  /**\n   * Maximum character length for skeleton mode\n   * @default 20\n   */\n  skeletonMaxLength?: number\n  skeletonIcon?: React.ReactNode\n}\n\nfunction Input({\n  className,\n  type,\n  variant = 'default',\n  skeletonMaxLength = DEFAULT_SKELETON_MAX_LENGTH,\n  skeletonIcon,\n  ...props\n}: InputProps) {\n  const [value, setValue] = React.useState('')\n  const [isFocused, setIsFocused] = React.useState(false)\n\n  const isSkeletonMode = variant === 'wireframe'\n\n  // Calculate width based on input length\n  const getSkeletonWidth = () => {\n    if (value.length === 0) return 'w-48'\n    if (value.length < WIDTH_THRESHOLD_SMALL) return 'w-16'\n    if (value.length < WIDTH_THRESHOLD_MEDIUM) return 'w-24'\n    if (value.length < WIDTH_THRESHOLD_LARGE) return 'w-32'\n    return 'w-48'\n  }\n\n  const showSkeleton = isSkeletonMode && !isFocused && value.length === 0\n  const showTypingSkeleton = isSkeletonMode && value.length > 0 && value.length <= skeletonMaxLength\n\n  if (isSkeletonMode) {\n    return (\n      <div className=\"relative w-full\">\n        <input\n          type={type}\n          data-slot=\"input\"\n          className={cn(\n            'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n            'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n            'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n            'text-transparent caret-transparent',\n            skeletonIcon ? 'pl-10' : '',\n            className\n          )}\n          value={value}\n          onChange={(e) => {\n            if (e.target.value.length <= skeletonMaxLength) {\n              setValue(e.target.value)\n            }\n          }}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          maxLength={skeletonMaxLength}\n          {...props}\n        />\n        <div className=\"pointer-events-none absolute inset-0 flex items-center gap-2 px-3\">\n          <div className=\"pointer-events-auto\">\n            {skeletonIcon || <AlignCenterIcon size={16} className=\"text-muted-foreground\" />}\n          </div>\n          {showSkeleton && <span className=\"wireframe-line h-3.5 w-48\" />}\n          {showTypingSkeleton && (\n            <span\n              className={cn('wireframe-line h-3.5 transition-all duration-200', getSkeletonWidth())}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui"
    }
  ]
}
