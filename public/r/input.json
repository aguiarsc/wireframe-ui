{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "title": "Input",
  "description": "A text input field with support for various types and validation states.",
  "dependencies": ["@heroicons/react"],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/ui/input.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Bars3Icon } from '@heroicons/react/24/outline'\r\n\r\n/**\r\n * Default maximum length for skeleton input text\r\n */\r\nconst DEFAULT_SKELETON_MAX_LENGTH = 20\r\n\r\n/**\r\n * Width calculation thresholds for skeleton input\r\n */\r\nconst WIDTH_THRESHOLD_SMALL = 5\r\nconst WIDTH_THRESHOLD_MEDIUM = 10\r\nconst WIDTH_THRESHOLD_LARGE = 15\r\n\r\nexport interface InputProps extends React.ComponentProps<'input'> {\r\n  /**\r\n   * Visual variant of the input\r\n   * @default 'default'\r\n   */\r\n  variant?: 'default' | 'wireframe'\r\n  /**\r\n   * Maximum character length for skeleton mode\r\n   * @default 20\r\n   */\r\n  skeletonMaxLength?: number\r\n  skeletonIcon?: React.ReactNode\r\n}\r\n\r\nfunction Input({\r\n  className,\r\n  type,\r\n  variant = 'default',\r\n  skeletonMaxLength = DEFAULT_SKELETON_MAX_LENGTH,\r\n  skeletonIcon,\r\n  ...props\r\n}: InputProps) {\r\n  const [value, setValue] = React.useState('')\r\n  const [isFocused, setIsFocused] = React.useState(false)\r\n\r\n  const isSkeletonMode = variant === 'wireframe'\r\n\r\n  // Calculate width based on input length\r\n  const getSkeletonWidth = () => {\r\n    if (value.length === 0) return 'w-48'\r\n    if (value.length < WIDTH_THRESHOLD_SMALL) return 'w-16'\r\n    if (value.length < WIDTH_THRESHOLD_MEDIUM) return 'w-24'\r\n    if (value.length < WIDTH_THRESHOLD_LARGE) return 'w-32'\r\n    return 'w-48'\r\n  }\r\n\r\n  const showSkeleton = isSkeletonMode && !isFocused && value.length === 0\r\n  const showTypingSkeleton = isSkeletonMode && value.length > 0 && value.length <= skeletonMaxLength\r\n\r\n  if (isSkeletonMode) {\r\n    return (\r\n      <div className=\"relative w-full\">\r\n        <input\r\n          type={type}\r\n          data-slot=\"input\"\r\n          className={cn(\r\n            'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n            'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\r\n            'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n            'text-transparent caret-transparent',\r\n            skeletonIcon ? 'pl-10' : '',\r\n            className\r\n          )}\r\n          value={value}\r\n          onChange={(e) => {\r\n            if (e.target.value.length <= skeletonMaxLength) {\r\n              setValue(e.target.value)\r\n            }\r\n          }}\r\n          onFocus={() => setIsFocused(true)}\r\n          onBlur={() => setIsFocused(false)}\r\n          maxLength={skeletonMaxLength}\r\n          {...props}\r\n        />\r\n        <div className=\"pointer-events-none absolute inset-0 flex items-center gap-2 px-3\">\r\n          <div className=\"pointer-events-auto\">\r\n            {skeletonIcon || <Bars3Icon className=\"text-muted-foreground\" />}\r\n          </div>\r\n          {showSkeleton && <span className=\"wireframe-line h-3.5 w-48\" />}\r\n          {showTypingSkeleton && (\r\n            <span\r\n              className={cn('wireframe-line h-3.5 transition-all duration-200', getSkeletonWidth())}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type={type}\r\n      data-slot=\"input\"\r\n      className={cn(\r\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\r\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Input }\r\n",
      "type": "registry:ui"
    }
  ]
}
