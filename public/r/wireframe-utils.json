{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wireframe-utils",
  "type": "registry:lib",
  "title": "Wireframe Utilities",
  "description": "Utility functions for wireframe components including responsive class generation and visibility helpers.",
  "dependencies": [],
  "registryDependencies": ["wireframe-types"],
  "files": [
    {
      "path": "registry/new-york/lib/wireframe-utils.ts",
      "content": "import type { ResponsiveProps } from '@/registry/new-york/lib/wireframe-types'\n\n/**\n * Generates responsive CSS classes based on breakpoint objects\n * @param responsive - Object with breakpoint keys (base, sm, md, lg, xl) and prop values\n * @param propName - The CSS property name to generate classes for (e.g., 'w' for width, 'h' for height)\n * @returns Space-separated string of responsive classes\n */\nexport function getResponsiveClasses<T extends Record<string, string | number>>(\n  responsive: ResponsiveProps<T>,\n  propName?: string\n): string\nexport function getResponsiveClasses(responsive: undefined, propName?: string): ''\nexport function getResponsiveClasses<T extends Record<string, string | number>>(\n  responsive: ResponsiveProps<T> | undefined,\n  propName?: string\n): string\nexport function getResponsiveClasses<T extends Record<string, string | number>>(\n  responsive: ResponsiveProps<T> | undefined,\n  propName?: string\n): string {\n  if (!responsive) return ''\n\n  const classes: string[] = []\n\n  // Handle base (no prefix)\n  if (responsive.base) {\n    Object.entries(responsive.base).forEach(([key, value]) => {\n      if (propName) {\n        classes.push(`${propName}-${value}`)\n      } else {\n        classes.push(`${key}-${value}`)\n      }\n    })\n  }\n\n  // Handle breakpoints\n  const breakpoints = ['sm', 'md', 'lg', 'xl'] as const\n  breakpoints.forEach((breakpoint) => {\n    if (responsive[breakpoint]) {\n      Object.entries(responsive[breakpoint]!).forEach(([key, value]) => {\n        if (propName) {\n          classes.push(`${breakpoint}:${propName}-${value}`)\n        } else {\n          classes.push(`${breakpoint}:${key}-${value}`)\n        }\n      })\n    }\n  })\n\n  return classes.join(' ')\n}\n\n/**\n * Generates CSS classes to hide elements at specific breakpoints\n * @param hideOn - Array of breakpoint names where the element should be hidden\n * @returns Space-separated string of hidden classes\n */\nexport function getHideOnClasses(\n  hideOn: ReadonlyArray<'sm' | 'md' | 'lg' | 'xl'> | undefined\n): string {\n  if (!hideOn || hideOn.length === 0) return ''\n\n  return hideOn.map((breakpoint) => `${breakpoint}:hidden`).join(' ')\n}\n",
      "type": "registry:lib"
    }
  ]
}
