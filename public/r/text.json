{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text",
  "type": "registry:ui",
  "title": "Text",
  "description": "A skeleton text placeholder component that renders thin animated lines for text content.",
  "dependencies": ["class-variance-authority"],
  "registryDependencies": ["wireframe-types", "wireframe-utils", "wireframe"],
  "files": [
    {
      "path": "registry/new-york/ui/text.tsx",
      "content": "import * as React from 'react'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport {\r\n  getResponsiveClasses,\r\n  getHideOnClasses,\r\n} from '@/registry/new-york/lib/wireframe-utils'\r\nimport type {\r\n  WireframeAnimation,\r\n  WireframeEmphasis,\r\n  ResponsiveProps,\r\n} from '@/registry/new-york/lib/wireframe-types'\r\n\r\nconst textVariants = cva('rounded-full inline-block align-middle', {\r\n  variants: {\r\n    size: {\r\n      xs: 'h-2',\r\n      sm: 'h-3',\r\n      base: 'h-3.5',\r\n      lg: 'h-4',\r\n      xl: 'h-5',\r\n    },\r\n    width: {\r\n      xs: 'w-16',\r\n      sm: 'w-24',\r\n      md: 'w-32',\r\n      lg: 'w-48',\r\n      xl: 'w-64',\r\n      full: 'w-full',\r\n    },\r\n    color: {\r\n      default: 'bg-muted-foreground/20',\r\n      muted: 'bg-muted-foreground/10',\r\n      subtle: 'bg-muted-foreground/15',\r\n      primary: 'bg-primary/20',\r\n      secondary: 'bg-secondary/30',\r\n      accent: 'bg-accent/50',\r\n    },\r\n    animate: {\r\n      none: '',\r\n      pulse: 'animate-pulse',\r\n      shimmer: 'wireframe-animate-shimmer',\r\n      typing: 'wireframe-animate-typing',\r\n    },\r\n    emphasis: {\r\n      primary: 'wireframe-emphasis-primary',\r\n      secondary: 'wireframe-emphasis-secondary',\r\n      tertiary: 'wireframe-emphasis-tertiary',\r\n      subtle: 'wireframe-emphasis-subtle',\r\n    },\r\n    truncate: {\r\n      true: '!w-full',\r\n      false: '',\r\n    },\r\n  },\r\n  compoundVariants: [\r\n    { truncate: true, width: 'xs', class: 'max-w-16' },\r\n    { truncate: true, width: 'sm', class: 'max-w-24' },\r\n    { truncate: true, width: 'md', class: 'max-w-32' },\r\n    { truncate: true, width: 'lg', class: 'max-w-48' },\r\n    { truncate: true, width: 'xl', class: 'max-w-64' },\r\n    { truncate: true, width: 'full', class: 'max-w-full' },\r\n  ],\r\n  defaultVariants: {\r\n    size: 'base',\r\n    width: 'md',\r\n    color: 'default',\r\n    animate: 'none',\r\n    truncate: false,\r\n  },\r\n})\r\n\r\nexport interface TextProps\r\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'color'>,\r\n    Omit<VariantProps<typeof textVariants>, 'animate' | 'emphasis'> {\r\n  truncate?: boolean\r\n  animate?: WireframeAnimation\r\n  emphasis?: WireframeEmphasis\r\n  responsive?: ResponsiveProps<{\r\n    size?: NonNullable<VariantProps<typeof textVariants>['size']>\r\n    width?: NonNullable<VariantProps<typeof textVariants>['width']>\r\n  }>\r\n  hideOn?: ('sm' | 'md' | 'lg' | 'xl')[]\r\n}\r\n\r\nconst TextComponent = React.forwardRef<HTMLSpanElement, TextProps>(\r\n  (\r\n    {\r\n      className,\r\n      size,\r\n      width,\r\n      color,\r\n      animate,\r\n      emphasis,\r\n      truncate,\r\n      responsive,\r\n      hideOn,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    // Emphasis takes priority over color when both are provided\r\n    const finalColor = emphasis ? undefined : color\r\n\r\n    // Generate responsive classes\r\n    const responsiveClasses = getResponsiveClasses(responsive)\r\n    const hideOnClasses = getHideOnClasses(hideOn)\r\n\r\n    return (\r\n      <span\r\n        ref={ref}\r\n        data-slot=\"text\"\r\n        className={cn(\r\n          textVariants({\r\n            size,\r\n            width,\r\n            color: finalColor,\r\n            animate,\r\n            emphasis,\r\n            truncate,\r\n          }),\r\n          responsiveClasses,\r\n          hideOnClasses,\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\n\r\nTextComponent.displayName = 'Text'\r\n\r\n// Semantic preset components\r\nconst TextHeading = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'width'>>(\r\n  (props, ref) => <TextComponent ref={ref} size=\"xl\" width=\"lg\" {...props} />\r\n)\r\nTextHeading.displayName = 'Text.Heading'\r\n\r\nconst TextParagraph = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'width'>>(\r\n  (props, ref) => <TextComponent ref={ref} size=\"base\" width=\"full\" {...props} />\r\n)\r\nTextParagraph.displayName = 'Text.Paragraph'\r\n\r\nconst TextCaption = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'color'>>(\r\n  (props, ref) => <TextComponent ref={ref} size=\"sm\" color=\"muted\" {...props} />\r\n)\r\nTextCaption.displayName = 'Text.Caption'\r\n\r\nconst TextLabel = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'width'>>(\r\n  (props, ref) => <TextComponent ref={ref} size=\"sm\" width=\"sm\" {...props} />\r\n)\r\nTextLabel.displayName = 'Text.Label'\r\n\r\n// Export main component with compound components\r\nexport const Text = Object.assign(TextComponent, {\r\n  Heading: TextHeading,\r\n  Paragraph: TextParagraph,\r\n  Caption: TextCaption,\r\n  Label: TextLabel,\r\n})\r\n\r\nexport { textVariants }\r\n",
      "type": "registry:ui"
    }
  ]
}
