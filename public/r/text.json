{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text",
  "type": "registry:ui",
  "title": "Text",
  "description": "A skeleton text placeholder component that renders thin animated lines for text content.",
  "dependencies": ["class-variance-authority"],
  "registryDependencies": ["wireframe-types", "wireframe-utils", "wireframe"],
  "files": [
    {
      "path": "registry/new-york/ui/text.tsx",
      "content": "import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { getResponsiveClasses, getHideOnClasses } from '@/registry/new-york/lib/wireframe-utils'\nimport type {\n  WireframeAnimation,\n  WireframeEmphasis,\n  ResponsiveProps,\n} from '@/registry/new-york/lib/wireframe-types'\n\nconst textVariants = cva('rounded-full inline-block align-middle', {\n  variants: {\n    size: {\n      xs: 'h-2',\n      sm: 'h-3',\n      base: 'h-3.5',\n      lg: 'h-4',\n      xl: 'h-5',\n    },\n    width: {\n      xs: 'w-16',\n      sm: 'w-24',\n      md: 'w-32',\n      lg: 'w-48',\n      xl: 'w-64',\n      full: 'w-full',\n    },\n    color: {\n      default: 'bg-muted-foreground/20',\n      muted: 'bg-muted-foreground/10',\n      subtle: 'bg-muted-foreground/15',\n      primary: 'bg-primary/20',\n      secondary: 'bg-secondary/30',\n      accent: 'bg-accent/50',\n    },\n    animate: {\n      none: '',\n      pulse: 'animate-pulse',\n      shimmer: 'wireframe-animate-shimmer',\n      typing: 'wireframe-animate-typing',\n    },\n    emphasis: {\n      primary: 'wireframe-emphasis-primary',\n      secondary: 'wireframe-emphasis-secondary',\n      tertiary: 'wireframe-emphasis-tertiary',\n      subtle: 'wireframe-emphasis-subtle',\n    },\n    truncate: {\n      true: '!w-full',\n      false: '',\n    },\n  },\n  compoundVariants: [\n    { truncate: true, width: 'xs', class: 'max-w-16' },\n    { truncate: true, width: 'sm', class: 'max-w-24' },\n    { truncate: true, width: 'md', class: 'max-w-32' },\n    { truncate: true, width: 'lg', class: 'max-w-48' },\n    { truncate: true, width: 'xl', class: 'max-w-64' },\n    { truncate: true, width: 'full', class: 'max-w-full' },\n  ],\n  defaultVariants: {\n    size: 'base',\n    width: 'md',\n    color: 'default',\n    animate: 'none',\n    truncate: false,\n  },\n})\n\nexport interface TextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'color'>,\n    Omit<VariantProps<typeof textVariants>, 'animate' | 'emphasis'> {\n  truncate?: boolean\n  animate?: WireframeAnimation\n  emphasis?: WireframeEmphasis\n  responsive?: ResponsiveProps<{\n    size?: NonNullable<VariantProps<typeof textVariants>['size']>\n    width?: NonNullable<VariantProps<typeof textVariants>['width']>\n  }>\n  hideOn?: ('sm' | 'md' | 'lg' | 'xl')[]\n}\n\nconst TextComponent = React.forwardRef<HTMLSpanElement, TextProps>(\n  (\n    { className, size, width, color, animate, emphasis, truncate, responsive, hideOn, ...props },\n    ref\n  ) => {\n    // Emphasis takes priority over color when both are provided\n    const finalColor = emphasis ? undefined : color\n\n    // Generate responsive classes\n    const responsiveClasses = getResponsiveClasses(responsive)\n    const hideOnClasses = getHideOnClasses(hideOn)\n\n    return (\n      <span\n        ref={ref}\n        data-slot=\"text\"\n        className={cn(\n          textVariants({\n            size,\n            width,\n            color: finalColor,\n            animate,\n            emphasis,\n            truncate,\n          }),\n          responsiveClasses,\n          hideOnClasses,\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\n\nTextComponent.displayName = 'Text'\n\n// Semantic preset components\nconst TextHeading = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'width'>>(\n  (props, ref) => <TextComponent ref={ref} size=\"xl\" width=\"lg\" {...props} />\n)\nTextHeading.displayName = 'Text.Heading'\n\nconst TextParagraph = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'width'>>(\n  (props, ref) => <TextComponent ref={ref} size=\"base\" width=\"full\" {...props} />\n)\nTextParagraph.displayName = 'Text.Paragraph'\n\nconst TextCaption = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'color'>>(\n  (props, ref) => <TextComponent ref={ref} size=\"sm\" color=\"muted\" {...props} />\n)\nTextCaption.displayName = 'Text.Caption'\n\nconst TextLabel = React.forwardRef<HTMLSpanElement, Omit<TextProps, 'size' | 'width'>>(\n  (props, ref) => <TextComponent ref={ref} size=\"sm\" width=\"sm\" {...props} />\n)\nTextLabel.displayName = 'Text.Label'\n\n// Export main component with compound components\nexport const Text = Object.assign(TextComponent, {\n  Heading: TextHeading,\n  Paragraph: TextParagraph,\n  Caption: TextCaption,\n  Label: TextLabel,\n})\n\nexport { textVariants }\n",
      "type": "registry:ui"
    }
  ]
}
