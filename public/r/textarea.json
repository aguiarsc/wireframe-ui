{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea",
  "type": "registry:ui",
  "title": "Textarea",
  "description": "A multi-line text input field with auto-resizing support.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/ui/textarea.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { cn } from '@/lib/utils'\n\n/**\n * Default maximum length for skeleton textarea text\n */\nconst DEFAULT_SKELETON_MAX_LENGTH = 100\n\n/**\n * Default number of skeleton lines to display\n */\nconst DEFAULT_SKELETON_LINES = 3\n\n/**\n * Approximate characters per line for width calculations\n */\nconst CHARS_PER_LINE = 40\n\n/**\n * Width calculation thresholds for last line\n */\nconst LAST_LINE_WIDTH_THRESHOLD_SMALL = 10\nconst LAST_LINE_WIDTH_THRESHOLD_MEDIUM = 20\nconst LAST_LINE_WIDTH_THRESHOLD_LARGE = 30\n\nexport interface TextareaProps extends React.ComponentProps<'textarea'> {\n  /**\n   * Visual variant of the textarea\n   * @default 'default'\n   */\n  variant?: 'default' | 'wireframe'\n  /**\n   * Maximum character length for skeleton mode\n   * @default 100\n   */\n  skeletonMaxLength?: number\n  /**\n   * Number of skeleton lines to display\n   * @default 3\n   */\n  skeletonLines?: number\n}\n\nfunction Textarea({\n  className,\n  variant = 'default',\n  skeletonMaxLength = DEFAULT_SKELETON_MAX_LENGTH,\n  skeletonLines = DEFAULT_SKELETON_LINES,\n  ...props\n}: TextareaProps) {\n  const [value, setValue] = React.useState('')\n  const [isFocused, setIsFocused] = React.useState(false)\n\n  const isSkeletonMode = variant === 'wireframe'\n\n  // Calculate how many lines to show based on character count\n  const getVisibleLines = () => {\n    if (value.length === 0) return skeletonLines\n    return Math.min(Math.ceil(value.length / CHARS_PER_LINE), skeletonLines)\n  }\n\n  // Calculate width for the last line\n  const getLastLineWidth = () => {\n    const remainder = value.length % CHARS_PER_LINE\n    if (remainder === 0) return 'w-full'\n    if (remainder < LAST_LINE_WIDTH_THRESHOLD_SMALL) return 'w-16'\n    if (remainder < LAST_LINE_WIDTH_THRESHOLD_MEDIUM) return 'w-32'\n    if (remainder < LAST_LINE_WIDTH_THRESHOLD_LARGE) return 'w-48'\n    return 'w-64'\n  }\n\n  const showSkeleton = isSkeletonMode && !isFocused && value.length === 0\n  const showTypingSkeleton = isSkeletonMode && value.length > 0 && value.length <= skeletonMaxLength\n\n  if (isSkeletonMode) {\n    return (\n      <div className=\"relative w-full\">\n        <textarea\n          data-slot=\"textarea\"\n          className={cn(\n            'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n            'resize-none text-transparent caret-transparent',\n            className\n          )}\n          value={value}\n          onChange={(e) => {\n            if (e.target.value.length <= skeletonMaxLength) {\n              setValue(e.target.value)\n            }\n          }}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          maxLength={skeletonMaxLength}\n          {...props}\n        />\n        <div className=\"pointer-events-none absolute inset-0 flex flex-col gap-2 p-3\">\n          {showSkeleton &&\n            Array.from({ length: skeletonLines }).map((_, i) => (\n              <span\n                key={i}\n                className={cn('wireframe-line h-3.5', i === skeletonLines - 1 ? 'w-3/4' : 'w-full')}\n              />\n            ))}\n          {showTypingSkeleton &&\n            Array.from({ length: getVisibleLines() }).map((_, i) => (\n              <span\n                key={i}\n                className={cn(\n                  'wireframe-line h-3.5 transition-all duration-200',\n                  i === getVisibleLines() - 1 ? getLastLineWidth() : 'w-full'\n                )}\n              />\n            ))}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n",
      "type": "registry:ui"
    }
  ]
}
