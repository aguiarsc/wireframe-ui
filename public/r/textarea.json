{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea",
  "type": "registry:ui",
  "title": "Textarea",
  "description": "A multi-line text input field with auto-resizing support.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/ui/textarea.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\n/**\r\n * Default maximum length for skeleton textarea text\r\n */\r\nconst DEFAULT_SKELETON_MAX_LENGTH = 100\r\n\r\n/**\r\n * Default number of skeleton lines to display\r\n */\r\nconst DEFAULT_SKELETON_LINES = 3\r\n\r\n/**\r\n * Approximate characters per line for width calculations\r\n */\r\nconst CHARS_PER_LINE = 40\r\n\r\n/**\r\n * Width calculation thresholds for last line\r\n */\r\nconst LAST_LINE_WIDTH_THRESHOLD_SMALL = 10\r\nconst LAST_LINE_WIDTH_THRESHOLD_MEDIUM = 20\r\nconst LAST_LINE_WIDTH_THRESHOLD_LARGE = 30\r\n\r\nexport interface TextareaProps extends React.ComponentProps<'textarea'> {\r\n  /**\r\n   * Visual variant of the textarea\r\n   * @default 'default'\r\n   */\r\n  variant?: 'default' | 'wireframe'\r\n  /**\r\n   * Maximum character length for skeleton mode\r\n   * @default 100\r\n   */\r\n  skeletonMaxLength?: number\r\n  /**\r\n   * Number of skeleton lines to display\r\n   * @default 3\r\n   */\r\n  skeletonLines?: number\r\n}\r\n\r\nfunction Textarea({\r\n  className,\r\n  variant = 'default',\r\n  skeletonMaxLength = DEFAULT_SKELETON_MAX_LENGTH,\r\n  skeletonLines = DEFAULT_SKELETON_LINES,\r\n  ...props\r\n}: TextareaProps) {\r\n  const [value, setValue] = React.useState('')\r\n  const [isFocused, setIsFocused] = React.useState(false)\r\n\r\n  const isSkeletonMode = variant === 'wireframe'\r\n\r\n  // Calculate how many lines to show based on character count\r\n  const getVisibleLines = () => {\r\n    if (value.length === 0) return skeletonLines\r\n    return Math.min(Math.ceil(value.length / CHARS_PER_LINE), skeletonLines)\r\n  }\r\n\r\n  // Calculate width for the last line\r\n  const getLastLineWidth = () => {\r\n    const remainder = value.length % CHARS_PER_LINE\r\n    if (remainder === 0) return 'w-full'\r\n    if (remainder < LAST_LINE_WIDTH_THRESHOLD_SMALL) return 'w-16'\r\n    if (remainder < LAST_LINE_WIDTH_THRESHOLD_MEDIUM) return 'w-32'\r\n    if (remainder < LAST_LINE_WIDTH_THRESHOLD_LARGE) return 'w-48'\r\n    return 'w-64'\r\n  }\r\n\r\n  const showSkeleton = isSkeletonMode && !isFocused && value.length === 0\r\n  const showTypingSkeleton = isSkeletonMode && value.length > 0 && value.length <= skeletonMaxLength\r\n\r\n  if (isSkeletonMode) {\r\n    return (\r\n      <div className=\"relative w-full\">\r\n        <textarea\r\n          data-slot=\"textarea\"\r\n          className={cn(\r\n            'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n            'resize-none text-transparent caret-transparent',\r\n            className\r\n          )}\r\n          value={value}\r\n          onChange={(e) => {\r\n            if (e.target.value.length <= skeletonMaxLength) {\r\n              setValue(e.target.value)\r\n            }\r\n          }}\r\n          onFocus={() => setIsFocused(true)}\r\n          onBlur={() => setIsFocused(false)}\r\n          maxLength={skeletonMaxLength}\r\n          {...props}\r\n        />\r\n        <div className=\"pointer-events-none absolute inset-0 flex flex-col gap-2 p-3\">\r\n          {showSkeleton &&\r\n            Array.from({ length: skeletonLines }).map((_, i) => (\r\n              <span\r\n                key={i}\r\n                className={cn('wireframe-line h-3.5', i === skeletonLines - 1 ? 'w-3/4' : 'w-full')}\r\n              />\r\n            ))}\r\n          {showTypingSkeleton &&\r\n            Array.from({ length: getVisibleLines() }).map((_, i) => (\r\n              <span\r\n                key={i}\r\n                className={cn(\r\n                  'wireframe-line h-3.5 transition-all duration-200',\r\n                  i === getVisibleLines() - 1 ? getLastLineWidth() : 'w-full'\r\n                )}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <textarea\r\n      data-slot=\"textarea\"\r\n      className={cn(\r\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Textarea }\r\n",
      "type": "registry:ui"
    }
  ]
}
