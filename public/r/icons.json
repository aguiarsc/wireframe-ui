{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons",
  "type": "registry:ui",
  "title": "Icons",
  "description": "A collection of icons for wireframe components.",
  "dependencies": ["motion"],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/icons/index.tsx",
      "content": "export { ActivityIcon, type ActivityIconHandle } from './activity'\r\nexport { AlignCenterIcon, type AlignCenterIconHandle } from './align-center-icon'\r\nexport { ArrowDownIcon, type ArrowDownIconHandle } from './arrow-down'\r\nexport { ArrowLeftIcon } from './arrow-left'\r\nexport { ArrowRightIcon } from './arrow-right'\r\nexport { ArrowUpIcon, type ArrowUpIconHandle } from './arrow-up'\r\nexport { AudioLinesIcon, type AudioLinesIconHandle } from './audio-lines-icon'\r\nexport { BadgeAlertIcon, type BadgeAlertIconHandle } from './badge-alert'\r\nexport { BellIcon, type BellIconHandle } from './bell-icon'\r\nexport { CalendarDaysIcon, type CalendarDaysIconHandle } from './calendar-days'\r\nexport { CartIcon, type CartIconHandle } from './cart'\r\nexport { CheckIcon, type CheckIconHandle } from './check'\r\nexport { ChevronDownIcon, type ChevronDownIconHandle } from './chevron-down'\r\nexport { ChevronLeftIcon } from './chevron-left'\r\nexport { ChevronRightIcon } from './chevron-right'\r\nexport { ChevronUpIcon } from './chevron-up'\r\nexport { CircleDashedIcon } from './circle-dashed'\r\nexport { CircleHelpIcon, type CircleHelpIconHandle } from './circle-help-icon'\r\nexport { ClapIcon, type ClapIconHandle } from './clap-icon'\r\nexport { ClipboardCheckIcon, type ClipboardCheckIconHandle } from './copy-check'\r\nexport { CursorClickIcon } from './cursor'\r\nexport { DollarSignIcon, type DollarSignIconHandle } from './dollar-sign'\r\nexport { GalleryThumbnailsIcon, type GalleryThumbnailsIconHandle } from './gallery-thumbnails-icon'\r\nexport { GalleryVerticalEndIcon, type GalleryVerticalEndIconHandle } from './gallery-vertical-end-icon'\r\nexport { HeartIcon, type HeartIconHandle } from './heart'\r\nexport { IdCardIcon, type IdCardIconHandle } from './id-card-icon'\r\nexport { LinkIcon, type LinkIconHandle } from './link'\r\nexport { LockIcon, type LockIconHandle } from './lock'\r\nexport { MailCheckIcon, type MailCheckIconHandle } from './mail-check'\r\nexport { MapPinIcon, type MapPinIconHandle } from './map-pin'\r\nexport { MessageCircleDashedIcon, type MessageCircleDashedIconHandle } from './message-circle-dashed-icon'\r\nexport { MessageCircleIcon, type MessageCircleIconHandle } from './message-circle'\r\nexport { PanelLeftCloseIcon } from './panel-left-close'\r\nexport { PanelLeftOpenIcon } from './panel-left-open'\r\nexport { PlayIcon, type PlayIconHandle } from './play'\r\nexport { PlusIcon } from './plus'\r\nexport { SearchIcon, type SearchIconHandle } from './search'\r\nexport { SparklesIcon, type SparklesIconHandle } from './sparkles'\r\nexport { SquarePenIcon } from './square-pen'\r\nexport { TrendingUpIcon, type TrendingUpIconHandle } from './trending-up'\r\nexport { UserIcon, type UserIconHandle } from './user-icon'\r\nexport { UserRoundPlusIcon, type UserRoundPlusIconHandle } from './user-round-plus'\r\nexport { UsersIcon, type UsersIconHandle } from './users'\r\nexport { WavesIcon, type WavesIconHandle } from './waves'\r\nexport { XIcon } from './x'\r\n",
      "type": "registry:component",
      "target": "components/icons/index.tsx"
    },
    {
      "path": "registry/new-york/icons/activity.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ActivityIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ActivityIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst variants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    pathOffset: 0,\r\n    transition: {\r\n      duration: 0.4,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    pathOffset: [1, 0],\r\n    transition: {\r\n      duration: 0.6,\r\n      ease: 'linear',\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n};\r\n\r\nconst ActivityIcon = forwardRef<ActivityIconHandle, ActivityIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={variants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            d=\"M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nActivityIcon.displayName = 'ActivityIcon';\r\n\r\nexport { ActivityIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/activity.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-down.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ArrowDownIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ArrowDownIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { d: 'm19 12-7 7-7-7', translateY: 0 },\r\n  animate: {\r\n    d: 'm19 12-7 7-7-7',\r\n    translateY: [0, -3, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst secondPathVariants: Variants = {\r\n  normal: { d: 'M12 5v14' },\r\n  animate: {\r\n    d: ['M12 5v14', 'M12 5v9', 'M12 5v14'],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst ArrowDownIcon = forwardRef<ArrowDownIconHandle, ArrowDownIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"m19 12-7 7-7-7\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M12 5v14\"\r\n            variants={secondPathVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nArrowDownIcon.displayName = 'ArrowDownIcon';\r\n\r\nexport { ArrowDownIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/arrow-down.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-left.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ArrowLeftIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ArrowLeftIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { d: 'm12 19-7-7 7-7', translateX: 0 },\r\n  animate: {\r\n    d: 'm12 19-7-7 7-7',\r\n    translateX: [0, 3, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst secondPathVariants: Variants = {\r\n  normal: { d: 'M19 12H5' },\r\n  animate: {\r\n    d: ['M19 12H5', 'M19 12H10', 'M19 12H5'],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst ArrowLeftIcon = forwardRef<ArrowLeftIconHandle, ArrowLeftIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"m12 19-7-7 7-7\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M19 12H5\"\r\n            variants={secondPathVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nArrowLeftIcon.displayName = 'ArrowLeftIcon';\r\n\r\nexport { ArrowLeftIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/arrow-left.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-right.tsx",
      "content": "'use client';\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ArrowRightIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ArrowRightIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { d: 'M5 12h14' },\r\n  animate: {\r\n    d: ['M5 12h14', 'M5 12h9', 'M5 12h14'],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst secondaryPathVariants: Variants = {\r\n  normal: { d: 'm12 5 7 7-7 7', translateX: 0 },\r\n  animate: {\r\n    d: 'm12 5 7 7-7 7',\r\n    translateX: [0, -3, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst ArrowRightIcon = forwardRef<ArrowRightIconHandle, ArrowRightIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M5 12h14\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"m12 5 7 7-7 7\"\r\n            variants={secondaryPathVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nArrowRightIcon.displayName = 'ArrowRightIcon';\r\n\r\nexport { ArrowRightIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/arrow-right.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-up.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ArrowUpIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ArrowUpIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { d: 'm5 12 7-7 7 7', translateY: 0 },\r\n  animate: {\r\n    d: 'm5 12 7-7 7 7',\r\n    translateY: [0, 3, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst secondPathVariants: Variants = {\r\n  normal: { d: 'M12 19V5' },\r\n  animate: {\r\n    d: ['M12 19V5', 'M12 19V10', 'M12 19V5'],\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n};\r\n\r\nconst ArrowUpIcon = forwardRef<ArrowUpIconHandle, ArrowUpIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"m5 12 7-7 7 7\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M12 19V5\"\r\n            variants={secondPathVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nArrowUpIcon.displayName = 'ArrowUpIcon';\r\n\r\nexport { ArrowUpIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/arrow-up.tsx"
    },
    {
      "path": "registry/new-york/icons/audio-lines-icon.tsx",
      "content": "'use client'\r\n\r\nimport { motion, useAnimation } from 'motion/react'\r\nimport type { HTMLAttributes } from 'react'\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\nexport interface AudioLinesIconHandle {\r\n  startAnimation: () => void\r\n  stopAnimation: () => void\r\n}\r\n\r\ninterface AudioLinesIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number\r\n}\r\n\r\nconst AudioLinesIcon = forwardRef<AudioLinesIconHandle, AudioLinesIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation()\r\n    const isControlledRef = useRef(false)\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      }\r\n    })\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate')\r\n        } else {\r\n          onMouseEnter?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    )\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal')\r\n        } else {\r\n          onMouseLeave?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    )\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <path d=\"M2 10v3\" />\r\n          <motion.path\r\n            variants={{\r\n              normal: { d: 'M6 6v11' },\r\n              animate: {\r\n                d: ['M6 6v11', 'M6 10v3', 'M6 6v11'],\r\n                transition: {\r\n                  duration: 1.5,\r\n                  repeat: Infinity,\r\n                },\r\n              },\r\n            }}\r\n            d=\"M6 6v11\"\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            variants={{\r\n              normal: { d: 'M10 3v18' },\r\n              animate: {\r\n                d: ['M10 3v18', 'M10 9v5', 'M10 3v18'],\r\n                transition: {\r\n                  duration: 1,\r\n                  repeat: Infinity,\r\n                },\r\n              },\r\n            }}\r\n            d=\"M10 3v18\"\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            variants={{\r\n              normal: { d: 'M14 8v7' },\r\n              animate: {\r\n                d: ['M14 8v7', 'M14 6v11', 'M14 8v7'],\r\n                transition: {\r\n                  duration: 0.8,\r\n                  repeat: Infinity,\r\n                },\r\n              },\r\n            }}\r\n            d=\"M14 8v7\"\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            variants={{\r\n              normal: { d: 'M18 5v13' },\r\n              animate: {\r\n                d: ['M18 5v13', 'M18 7v9', 'M18 5v13'],\r\n                transition: {\r\n                  duration: 1.5,\r\n                  repeat: Infinity,\r\n                },\r\n              },\r\n            }}\r\n            d=\"M18 5v13\"\r\n            animate={controls}\r\n          />\r\n          <path d=\"M22 10v3\" />\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nAudioLinesIcon.displayName = 'AudioLinesIcon'\r\n\r\nexport { AudioLinesIcon }\r\n",
      "type": "registry:component",
      "target": "components/icons/audio-lines-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/badge-alert.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface BadgeAlertIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface BadgeAlertIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst iconVariants: Variants = {\r\n  normal: { scale: 1, rotate: 0 },\r\n  animate: {\r\n    scale: [1, 1.1, 1.1, 1.1, 1],\r\n    rotate: [0, -3, 3, -2, 2, 0],\r\n    transition: {\r\n      duration: 0.5,\r\n      times: [0, 0.2, 0.4, 0.6, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n};\r\nconst BadgeAlertIcon = forwardRef<BadgeAlertIconHandle, BadgeAlertIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          animate={controls}\r\n          variants={iconVariants}\r\n        >\r\n          <path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z\" />\r\n          <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\" />\r\n          <line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nBadgeAlertIcon.displayName = 'BadgeAlertIcon';\r\n\r\nexport { BadgeAlertIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/badge-alert.tsx"
    },
    {
      "path": "registry/new-york/icons/calendar-days.tsx",
      "content": "'use client';\r\n\r\nimport { AnimatePresence, motion, useAnimation } from 'motion/react';\r\nimport type { Variants } from 'motion/react';\r\nimport { useCallback, useImperativeHandle, useRef } from 'react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CalendarDaysIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CalendarDaysIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst DOTS = [\r\n  { cx: 8, cy: 14 },\r\n  { cx: 12, cy: 14 },\r\n  { cx: 16, cy: 14 },\r\n  { cx: 8, cy: 18 },\r\n  { cx: 12, cy: 18 },\r\n  { cx: 16, cy: 18 },\r\n];\r\n\r\nconst variants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.2,\r\n    },\r\n  },\r\n  animate: (i: number) => ({\r\n    opacity: [1, 0.3, 1],\r\n    transition: {\r\n      delay: i * 0.1,\r\n      duration: 0.4,\r\n      times: [0, 0.5, 1],\r\n    },\r\n  }),\r\n};\r\n\r\nconst CalendarDaysIcon = forwardRef<\r\n  CalendarDaysIconHandle,\r\n  CalendarDaysIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <path d=\"M8 2v4\" />\r\n        <path d=\"M16 2v4\" />\r\n        <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" />\r\n        <path d=\"M3 10h18\" />\r\n        <AnimatePresence>\r\n          {DOTS.map((dot, index) => (\r\n            <motion.circle\r\n              key={`${dot.cx}-${dot.cy}`}\r\n              cx={dot.cx}\r\n              cy={dot.cy}\r\n              r=\"1\"\r\n              fill=\"currentColor\"\r\n              stroke=\"none\"\r\n              initial=\"normal\"\r\n              variants={variants}\r\n              animate={controls}\r\n              custom={index}\r\n            />\r\n          ))}\r\n        </AnimatePresence>\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nCalendarDaysIcon.displayName = 'CalendarDaysIcon';\r\n\r\nexport { CalendarDaysIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/calendar-days.tsx"
    },
    {
      "path": "registry/new-york/icons/cart.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CartIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CartIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst cartVariants: Variants = {\r\n  normal: { scale: 1 },\r\n  animate: {\r\n    scale: 1.1,\r\n    y: [0, -5, 0],\r\n    transition: {\r\n      duration: 0.3,\r\n      ease: 'easeInOut',\r\n      y: { repeat: 1, delay: 0.1, duration: 0.4 },\r\n    },\r\n  },\r\n};\r\n\r\nconst CartIcon = forwardRef<CartIconHandle, CartIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={cartVariants}\r\n          animate={controls}\r\n          transition={{ duration: 0.2 }}\r\n        >\r\n          <path d=\"M6.29977 5H21L19 12H7.37671M20 16H8L6 3H3M9 20C9 20.5523 8.55228 21 8 21C7.44772 21 7 20.5523 7 20C7 19.4477 7.44772 19 8 19C8.55228 19 9 19.4477 9 20ZM20 20C20 20.5523 19.5523 21 19 21C18.4477 21 18 20.5523 18 20C18 19.4477 18.4477 19 19 19C19.5523 19 20 19.4477 20 20Z\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCartIcon.displayName = 'CartIcon';\r\n\r\nexport { CartIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/cart.tsx"
    },
    {
      "path": "registry/new-york/icons/check.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CheckIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CheckIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.3,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    scale: [0.5, 1],\r\n    transition: {\r\n      duration: 0.4,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n};\r\n\r\nconst CheckIcon = forwardRef<CheckIconHandle, CheckIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={pathVariants}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n            d=\"M4 12 9 17L20 6\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCheckIcon.displayName = 'CheckIcon';\r\n\r\nexport { CheckIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/check.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-down.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ChevronDownIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ChevronDownIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst defaultTransition: Transition = {\r\n  times: [0, 0.4, 1],\r\n  duration: 0.5,\r\n};\r\n\r\nconst ChevronDownIcon = forwardRef<ChevronDownIconHandle, ChevronDownIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={{\r\n              normal: { y: 0 },\r\n              animate: { y: [0, 2, 0] },\r\n            }}\r\n            transition={defaultTransition}\r\n            animate={controls}\r\n            d=\"m6 9 6 6 6-6\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nChevronDownIcon.displayName = 'ChevronDownIcon';\r\n\r\nexport { ChevronDownIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/chevron-down.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-left.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ChevronLeftIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ChevronLeftIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst defaultTransition: Transition = {\r\n  times: [0, 0.4, 1],\r\n  duration: 0.5,\r\n};\r\n\r\nconst ChevronLeftIcon = forwardRef<ChevronLeftIconHandle, ChevronLeftIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={{\r\n              normal: { x: 0 },\r\n              animate: { x: [0, -2, 0] },\r\n            }}\r\n            transition={defaultTransition}\r\n            animate={controls}\r\n            d=\"m15 18-6-6 6-6\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nChevronLeftIcon.displayName = 'ChevronLeftIcon';\r\n\r\nexport { ChevronLeftIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/chevron-left.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-right.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ChevronRightIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ChevronRightIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst defaultTransition: Transition = {\r\n  times: [0, 0.4, 1],\r\n  duration: 0.5,\r\n};\r\n\r\nconst ChevronRightIcon = forwardRef<\r\n  ChevronRightIconHandle,\r\n  ChevronRightIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <motion.path\r\n          variants={{\r\n            normal: { x: 0 },\r\n            animate: { x: [0, 2, 0] },\r\n          }}\r\n          transition={defaultTransition}\r\n          animate={controls}\r\n          d=\"m9 18 6-6-6-6\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nChevronRightIcon.displayName = 'ChevronRightIcon';\r\n\r\nexport { ChevronRightIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/chevron-right.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-up.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ChevronUpIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ChevronUpIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst defaultTransition: Transition = {\r\n  times: [0, 0.4, 1],\r\n  duration: 0.5,\r\n};\r\n\r\nconst ChevronUpIcon = forwardRef<ChevronUpIconHandle, ChevronUpIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={{\r\n              normal: { y: 0 },\r\n              animate: { y: [0, -2, 0] },\r\n            }}\r\n            transition={defaultTransition}\r\n            animate={controls}\r\n            d=\"m18 15-6-6-6 6\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nChevronUpIcon.displayName = 'ChevronUpIcon';\r\n\r\nexport { ChevronUpIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/chevron-up.tsx"
    },
    {
      "path": "registry/new-york/icons/circle-dashed.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CircleDashedIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CircleDashedIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { opacity: 1 },\r\n  animate: (i: number) => ({\r\n    opacity: [0, 1],\r\n    transition: { delay: i * 0.1, duration: 0.3 },\r\n  }),\r\n};\r\n\r\nconst CircleDashedIcon = forwardRef<\r\n  CircleDashedIconHandle,\r\n  CircleDashedIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        {[\r\n          'M10.1 2.182a10 10 0 0 1 3.8 0',\r\n          'M13.9 21.818a10 10 0 0 1-3.8 0',\r\n          'M17.609 3.721a10 10 0 0 1 2.69 2.7',\r\n          'M2.182 13.9a10 10 0 0 1 0-3.8',\r\n          'M20.279 17.609a10 10 0 0 1-2.7 2.69',\r\n          'M21.818 10.1a10 10 0 0 1 0 3.8',\r\n          'M3.721 6.391a10 10 0 0 1 2.7-2.69',\r\n          'M6.391 20.279a10 10 0 0 1-2.69-2.7',\r\n        ].map((d, index) => (\r\n          <motion.path\r\n            key={d}\r\n            d={d}\r\n            animate={controls}\r\n            variants={pathVariants}\r\n            custom={index + 1}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nCircleDashedIcon.displayName = 'CircleDashedIcon';\r\n\r\nexport { CircleDashedIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/circle-dashed.tsx"
    },
    {
      "path": "registry/new-york/icons/clap-icon.tsx",
      "content": "'use client'\r\n\r\nimport type { Variants } from 'motion/react'\r\nimport { motion, useAnimation } from 'motion/react'\r\nimport type { HTMLAttributes } from 'react'\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\nexport interface ClapIconHandle {\r\n  startAnimation: () => void\r\n  stopAnimation: () => void\r\n}\r\n\r\ninterface ClapIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number\r\n}\r\n\r\nconst variants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    originX: '4px',\r\n    originY: '20px',\r\n  },\r\n  animate: {\r\n    rotate: [-10, -10, 0],\r\n    transition: {\r\n      duration: 0.8,\r\n      times: [0, 0.5, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n}\r\n\r\nconst clapVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    originX: '3px',\r\n    originY: '11px',\r\n  },\r\n  animate: {\r\n    rotate: [0, -10, 16, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n      times: [0, 0.3, 0.6, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n}\r\n\r\nconst ClapIcon = forwardRef<ClapIconHandle, ClapIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation()\r\n    const isControlledRef = useRef(false)\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      }\r\n    })\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate')\r\n        } else {\r\n          onMouseEnter?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    )\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal')\r\n        } else {\r\n          onMouseLeave?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    )\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"currentColor\"\r\n          stroke=\"none\"\r\n          style={{ overflow: 'visible' }}\r\n        >\r\n          <motion.g animate={controls} variants={variants}>\r\n            <motion.g animate={controls} variants={clapVariants}>\r\n              <path d=\"M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z\" />\r\n            </motion.g>\r\n            <path d=\"M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z\" />\r\n          </motion.g>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nClapIcon.displayName = 'ClapIcon'\r\n\r\nexport { ClapIcon }\r\n",
      "type": "registry:component",
      "target": "components/icons/clap-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/copy-check.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { Variants } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ClipboardCheckIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ClipboardCheckIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst checkVariants: Variants = {\r\n  normal: {\r\n    pathLength: 1,\r\n    opacity: 0,\r\n    transition: {\r\n      duration: 0.3,\r\n    },\r\n  },\r\n  animate: {\r\n    pathLength: [0, 1],\r\n    opacity: [0, 1],\r\n    transition: {\r\n      pathLength: { duration: 0.3, ease: 'easeInOut' },\r\n      opacity: { duration: 0.3, ease: 'easeInOut' },\r\n    },\r\n  },\r\n};\r\n\r\nconst ClipboardCheckIcon = forwardRef<\r\n  ClipboardCheckIconHandle,\r\n  ClipboardCheckIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <rect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" />\r\n        <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" />\r\n        <motion.path\r\n          animate={controls}\r\n          initial=\"normal\"\r\n          variants={checkVariants}\r\n          d=\"m9 14 2 2 4-4\"\r\n          style={{ transformOrigin: 'center' }}\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nClipboardCheckIcon.displayName = 'ClipboardCheckIcon';\r\n\r\nexport { ClipboardCheckIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/copy-check.tsx"
    },
    {
      "path": "registry/new-york/icons/cursor.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CursorClickIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CursorClickIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst cursorVariants: Variants = {\r\n  initial: { x: 0, y: 0 },\r\n  hover: {\r\n    x: [0, 0, -3, 0],\r\n    y: [0, -4, 0, 0],\r\n    transition: {\r\n      duration: 1,\r\n      bounce: 0.3,\r\n    },\r\n  },\r\n};\r\n\r\nconst lineVariants: Variants = {\r\n  initial: { opacity: 1, x: 0, y: 0 },\r\n  spread: (custom: { x: number; y: number }) => ({\r\n    opacity: [0, 1, 0, 0, 0, 0, 1],\r\n    x: [0, custom.x, 0, 0],\r\n    y: [0, custom.y, 0, 0],\r\n    transition: {\r\n      type: 'spring',\r\n      stiffness: 70,\r\n      damping: 10,\r\n      mass: 0.4,\r\n    },\r\n  }),\r\n};\r\n\r\nconst CursorClickIcon = forwardRef<CursorClickIconHandle, CursorClickIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const clickControls = useAnimation();\r\n    const cursorControls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => {\r\n          cursorControls.start('hover');\r\n          clickControls.start('spread', { delay: 1.3 });\r\n        },\r\n        stopAnimation: () => {\r\n          cursorControls.start('initial');\r\n          clickControls.start('initial');\r\n        },\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          cursorControls.start('hover');\r\n          clickControls.start('spread', { delay: 1.3 });\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [clickControls, cursorControls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          cursorControls.start('initial');\r\n          clickControls.start('initial');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [cursorControls, clickControls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z\"\r\n            variants={cursorVariants}\r\n            animate={cursorControls}\r\n          />\r\n          <motion.path\r\n            d=\"M14 4.1 12 6\"\r\n            variants={lineVariants}\r\n            animate={clickControls}\r\n            custom={{ x: 1, y: -1 }}\r\n          />\r\n          <motion.path\r\n            d=\"m5.1 8-2.9-.8\"\r\n            variants={lineVariants}\r\n            animate={clickControls}\r\n            custom={{ x: -1, y: 0 }}\r\n          />\r\n          <motion.path\r\n            d=\"m6 12-1.9 2\"\r\n            variants={lineVariants}\r\n            animate={clickControls}\r\n            custom={{ x: -1, y: 1 }}\r\n          />\r\n          <motion.path\r\n            d=\"M7.2 2.2 8 5.1\"\r\n            variants={lineVariants}\r\n            animate={clickControls}\r\n            custom={{ x: 0, y: -1 }}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCursorClickIcon.displayName = 'CursorClickIcon';\r\n\r\nexport { CursorClickIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/cursor.tsx"
    },
    {
      "path": "registry/new-york/icons/dollar-sign.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface DollarSignIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface DollarSignIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst DOLLAR_MAIN_VARIANTS: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    transition: {\r\n      duration: 0.4,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    transition: {\r\n      duration: 0.6,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n};\r\n\r\nconst DOLLAR_SECONDARY_VARIANTS: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    pathOffset: 0,\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.3,\r\n      opacity: { duration: 0.1, delay: 0.3 },\r\n    },\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    pathOffset: [1, 0],\r\n    transition: {\r\n      delay: 0.5,\r\n      duration: 0.4,\r\n      opacity: { duration: 0.1, delay: 0.5 },\r\n    },\r\n  },\r\n};\r\n\r\nconst DollarSignIcon = forwardRef<DollarSignIconHandle, DollarSignIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"\r\n            initial=\"normal\"\r\n            animate={controls}\r\n            variants={DOLLAR_MAIN_VARIANTS}\r\n          />\r\n          <motion.path\r\n            d=\"M12 22 L12 2\"\r\n            initial=\"normal\"\r\n            animate={controls}\r\n            variants={DOLLAR_SECONDARY_VARIANTS}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDollarSignIcon.displayName = 'DollarSignIcon';\r\n\r\nexport { DollarSignIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/dollar-sign.tsx"
    },
    {
      "path": "registry/new-york/icons/gallery-thumbnails-icon.tsx",
      "content": "'use client'\r\n\r\nimport type { Variants } from 'motion/react'\r\nimport { motion, useAnimation } from 'motion/react'\r\nimport type { HTMLAttributes } from 'react'\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\nexport interface GalleryThumbnailsIconHandle {\r\n  startAnimation: () => void\r\n  stopAnimation: () => void\r\n}\r\n\r\ninterface GalleryThumbnailsIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { opacity: 1 },\r\n  animate: (i: number) => ({\r\n    opacity: [0, 1],\r\n    transition: { delay: i * 0.15, duration: 0.2 },\r\n  }),\r\n}\r\n\r\nconst GalleryThumbnailsIcon = forwardRef<GalleryThumbnailsIconHandle, GalleryThumbnailsIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation()\r\n    const isControlledRef = useRef(false)\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      }\r\n    })\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate')\r\n        } else {\r\n          onMouseEnter?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    )\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal')\r\n        } else {\r\n          onMouseLeave?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    )\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <rect width=\"18\" height=\"14\" x=\"3\" y=\"3\" rx=\"2\" />\r\n          {['M4 21h1', 'M9 21h1', 'M14 21h1', 'M19 21h1'].map((d, index) => (\r\n            <motion.path\r\n              key={d}\r\n              d={d}\r\n              animate={controls}\r\n              variants={pathVariants}\r\n              custom={index + 1}\r\n            />\r\n          ))}\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nGalleryThumbnailsIcon.displayName = 'GalleryThumbnailsIcon'\r\n\r\nexport { GalleryThumbnailsIcon }\r\n",
      "type": "registry:component",
      "target": "components/icons/gallery-thumbnails-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/heart.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface HeartIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface HeartIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst HeartIcon = forwardRef<HeartIconHandle, HeartIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          animate={controls}\r\n          variants={{\r\n            normal: { scale: 1 },\r\n            animate: { scale: [1, 1.08, 1] },\r\n          }}\r\n          transition={{\r\n            duration: 0.45,\r\n            repeat: 2,\r\n          }}\r\n        >\r\n          <path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nHeartIcon.displayName = 'HeartIcon';\r\n\r\nexport { HeartIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/heart.tsx"
    },
    {
      "path": "registry/new-york/icons/link.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface LinkIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface LinkIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  initial: { pathLength: 1, pathOffset: 0, rotate: 0 },\r\n  animate: {\r\n    pathLength: [1, 0.97, 1, 0.97, 1],\r\n    pathOffset: [0, 0.05, 0, 0.05, 0],\r\n    rotate: [0, -5, 0],\r\n    transition: {\r\n      rotate: {\r\n        duration: 0.5,\r\n      },\r\n      duration: 1,\r\n      times: [0, 0.2, 0.4, 0.6, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n};\r\n\r\nconst LinkIcon = forwardRef<LinkIconHandle, LinkIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nLinkIcon.displayName = 'LinkIcon';\r\n\r\nexport { LinkIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/link.tsx"
    },
    {
      "path": "registry/new-york/icons/lock.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface LockIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface LockIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst LockIcon = forwardRef<LockIconHandle, LockIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          initial=\"normal\"\r\n          variants={{\r\n            normal: {\r\n              rotate: 0,\r\n              scale: 1,\r\n            },\r\n            animate: {\r\n              rotate: [-3, 1, -2, 0],\r\n              scale: [0.95, 1.05, 0.98, 1],\r\n            },\r\n          }}\r\n          transition={{\r\n            duration: 1,\r\n            ease: [0.4, 0, 0.2, 1],\r\n          }}\r\n          animate={controls}\r\n        >\r\n          <rect width=\"18\" height=\"11\" x=\"3\" y=\"11\" rx=\"2\" ry=\"2\" />\r\n          <motion.path\r\n            d=\"M7 11V7a5 5 0 0 1 10 0v4\"\r\n            initial=\"normal\"\r\n            variants={{\r\n              normal: {\r\n                pathLength: 1,\r\n              },\r\n              animate: {\r\n                pathLength: 0.7,\r\n              },\r\n            }}\r\n            transition={{\r\n              duration: 0.3,\r\n              ease: [0.4, 0, 0.2, 1],\r\n            }}\r\n            animate={controls}\r\n          />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nLockIcon.displayName = 'LockIcon';\r\n\r\nexport { LockIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/lock.tsx"
    },
    {
      "path": "registry/new-york/icons/mail-check.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { Variants } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface MailCheckIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface MailCheckIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst checkVariants: Variants = {\r\n  normal: {\r\n    pathLength: 1,\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.3,\r\n    },\r\n  },\r\n  animate: {\r\n    pathLength: [0, 1],\r\n    opacity: [0, 1],\r\n    transition: {\r\n      pathLength: { duration: 0.4, ease: 'easeInOut' },\r\n      opacity: { duration: 0.4, ease: 'easeInOut' },\r\n    },\r\n  },\r\n};\r\n\r\nconst MailCheckIcon = forwardRef<MailCheckIconHandle, MailCheckIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <path d=\"M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8\" />\r\n          <path d=\"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\" />\r\n          <motion.path\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            variants={checkVariants}\r\n            d=\"m16 19 2 2 4-4\"\r\n            style={{ transformOrigin: 'center' }}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nMailCheckIcon.displayName = 'MailCheckIcon';\r\n\r\nexport { MailCheckIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/mail-check.tsx"
    },
    {
      "path": "registry/new-york/icons/map-pin.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface MapPinIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface MapPinIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst svgVariants: Variants = {\r\n  normal: {\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    y: [0, -5, -3],\r\n    transition: {\r\n      duration: 0.5,\r\n      times: [0, 0.6, 1],\r\n    },\r\n  },\r\n};\r\n\r\nconst circleVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    pathOffset: [0.5, 0],\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.5,\r\n      opacity: { duration: 0.1, delay: 0.3 },\r\n    },\r\n  },\r\n};\r\n\r\nconst MapPinIcon = forwardRef<MapPinIconHandle, MapPinIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={svgVariants}\r\n          initial=\"normal\"\r\n          animate={controls}\r\n        >\r\n          <path d=\"M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0\" />\r\n          <motion.circle\r\n            cx=\"12\"\r\n            cy=\"10\"\r\n            r=\"3\"\r\n            variants={circleVariants}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n          />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nMapPinIcon.displayName = 'MapPinIcon';\r\n\r\nexport { MapPinIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/map-pin.tsx"
    },
    {
      "path": "registry/new-york/icons/message-circle.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface MessageCircleIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface MessageCircleIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst iconVariants: Variants = {\r\n  normal: {\r\n    scale: 1,\r\n    rotate: 0,\r\n  },\r\n  animate: {\r\n    scale: 1.05,\r\n    rotate: [0, -7, 7, 0],\r\n    transition: {\r\n      rotate: {\r\n        duration: 0.5,\r\n        ease: 'easeInOut',\r\n      },\r\n      scale: {\r\n        type: 'spring',\r\n        stiffness: 400,\r\n        damping: 10,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst MessageCircleIcon = forwardRef<\r\n  MessageCircleIconHandle,\r\n  MessageCircleIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <motion.svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        variants={iconVariants}\r\n        animate={controls}\r\n      >\r\n        <path d=\"M7.9 20A9 9 0 1 0 4 16.1L2 22Z\" />\r\n      </motion.svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nMessageCircleIcon.displayName = 'MessageCircleIcon';\r\n\r\nexport { MessageCircleIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/message-circle.tsx"
    },
    {
      "path": "registry/new-york/icons/panel-left-close.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition, Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface PanelLeftCloseIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface PanelLeftCloseIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst defaultTransition: Transition = {\r\n  times: [0, 0.4, 1],\r\n  duration: 0.5,\r\n};\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { x: 0 },\r\n  animate: { x: [0, -1.5, 0] },\r\n};\r\n\r\nconst PanelLeftCloseIcon = forwardRef<\r\n  PanelLeftCloseIconHandle,\r\n  PanelLeftCloseIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" />\r\n        <path d=\"M9 3v18\" />\r\n        <motion.path\r\n          transition={defaultTransition}\r\n          variants={pathVariants}\r\n          animate={controls}\r\n          d=\"m16 15-3-3 3-3\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nPanelLeftCloseIcon.displayName = 'PanelLeftCloseIcon';\r\n\r\nexport { PanelLeftCloseIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/panel-left-close.tsx"
    },
    {
      "path": "registry/new-york/icons/panel-left-open.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition, Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface PanelLeftOpenIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface PanelLeftOpenIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst defaultTransition: Transition = {\r\n  times: [0, 0.4, 1],\r\n  duration: 0.5,\r\n};\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { x: 0 },\r\n  animate: { x: [0, 1.5, 0] },\r\n};\r\n\r\nconst PanelLeftOpenIcon = forwardRef<\r\n  PanelLeftOpenIconHandle,\r\n  PanelLeftOpenIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" />\r\n        <path d=\"M9 3v18\" />\r\n        <motion.path\r\n          transition={defaultTransition}\r\n          variants={pathVariants}\r\n          animate={controls}\r\n          d=\"m14 9 3 3-3 3\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nPanelLeftOpenIcon.displayName = 'PanelLeftOpenIcon';\r\n\r\nexport { PanelLeftOpenIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/panel-left-open.tsx"
    },
    {
      "path": "registry/new-york/icons/play.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface PlayIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface PlayIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: {\r\n    x: 0,\r\n    rotate: 0,\r\n  },\r\n  animate: {\r\n    x: [0, -1, 2, 0],\r\n    rotate: [0, -10, 0, 0],\r\n    transition: {\r\n      duration: 0.5,\r\n      times: [0, 0.2, 0.5, 1],\r\n      stiffness: 260,\r\n      damping: 20,\r\n    },\r\n  },\r\n};\r\n\r\nconst PlayIcon = forwardRef<PlayIconHandle, PlayIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.polygon\r\n            points=\"6 3 20 12 6 21 6 3\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nPlayIcon.displayName = 'PlayIcon';\r\n\r\nexport { PlayIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/play.tsx"
    },
    {
      "path": "registry/new-york/icons/plus.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface PlusIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface PlusIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst PlusIcon = forwardRef<PlusIconHandle, PlusIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          animate={controls}\r\n          transition={{ type: 'spring', stiffness: 100, damping: 15 }}\r\n          variants={{\r\n            normal: {\r\n              rotate: 0,\r\n            },\r\n            animate: {\r\n              rotate: 180,\r\n            },\r\n          }}\r\n        >\r\n          <path d=\"M5 12h14\" />\r\n          <path d=\"M12 5v14\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nPlusIcon.displayName = 'PlusIcon';\r\n\r\nexport { PlusIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/plus.tsx"
    },
    {
      "path": "registry/new-york/icons/search.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface SearchIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface SearchIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst SearchIcon = forwardRef<SearchIconHandle, SearchIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={{\r\n            normal: { x: 0, y: 0 },\r\n            animate: {\r\n              x: [0, 0, -3, 0],\r\n              y: [0, -4, 0, 0],\r\n            },\r\n          }}\r\n          transition={{\r\n            duration: 1,\r\n            bounce: 0.3,\r\n          }}\r\n          animate={controls}\r\n        >\r\n          <circle cx=\"11\" cy=\"11\" r=\"8\" />\r\n          <path d=\"m21 21-4.3-4.3\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nSearchIcon.displayName = 'SearchIcon';\r\n\r\nexport { SearchIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/search.tsx"
    },
    {
      "path": "registry/new-york/icons/sparkles.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface SparklesIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface SparklesIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst sparkleVariants: Variants = {\r\n  initial: {\r\n    y: 0,\r\n    fill: 'none',\r\n  },\r\n  hover: {\r\n    y: [0, -1, 0, 0],\r\n    fill: 'currentColor',\r\n    transition: {\r\n      duration: 1,\r\n      bounce: 0.3,\r\n    },\r\n  },\r\n};\r\n\r\nconst starVariants: Variants = {\r\n  initial: {\r\n    opacity: 1,\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  blink: () => ({\r\n    opacity: [0, 1, 0, 0, 0, 0, 1],\r\n    transition: {\r\n      duration: 2,\r\n      type: 'spring',\r\n      stiffness: 70,\r\n      damping: 10,\r\n      mass: 0.4,\r\n    },\r\n  }),\r\n};\r\n\r\nconst SparklesIcon = forwardRef<SparklesIconHandle, SparklesIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const starControls = useAnimation();\r\n    const sparkleControls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => {\r\n          sparkleControls.start('hover');\r\n          starControls.start('blink', { delay: 1 });\r\n        },\r\n        stopAnimation: () => {\r\n          sparkleControls.start('initial');\r\n          starControls.start('initial');\r\n        },\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          sparkleControls.start('hover');\r\n          starControls.start('blink', { delay: 1 });\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [onMouseEnter, sparkleControls, starControls]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          sparkleControls.start('initial');\r\n          starControls.start('initial');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [sparkleControls, starControls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z\"\r\n            variants={sparkleVariants}\r\n            animate={sparkleControls}\r\n          />\r\n          <motion.path\r\n            d=\"M20 3v4\"\r\n            variants={starVariants}\r\n            animate={starControls}\r\n          />\r\n          <motion.path\r\n            d=\"M22 5h-4\"\r\n            variants={starVariants}\r\n            animate={starControls}\r\n          />\r\n          <motion.path\r\n            d=\"M4 17v2\"\r\n            variants={starVariants}\r\n            animate={starControls}\r\n          />\r\n          <motion.path\r\n            d=\"M5 18H3\"\r\n            variants={starVariants}\r\n            animate={starControls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nSparklesIcon.displayName = 'SparklesIcon';\r\n\r\nexport { SparklesIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/sparkles.tsx"
    },
    {
      "path": "registry/new-york/icons/square-pen.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface SquarePenIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface SquarePenIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst penVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    rotate: [-0.5, 0.5, -0.5],\r\n    x: [0, -1, 1.5, 0],\r\n    y: [0, 1.5, -1, 0],\r\n  },\r\n};\r\n\r\nconst SquarePenIcon = forwardRef<SquarePenIconHandle, SquarePenIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          style={{ overflow: 'visible' }}\r\n        >\r\n          <path d=\"M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\r\n          <motion.path\r\n            d=\"M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z\"\r\n            variants={penVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nSquarePenIcon.displayName = 'SquarePenIcon';\r\n\r\nexport { SquarePenIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/square-pen.tsx"
    },
    {
      "path": "registry/new-york/icons/trending-up.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface TrendingUpIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface TrendingUpIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst svgVariants: Variants = {\r\n  animate: {\r\n    x: 0,\r\n    y: 0,\r\n    translateX: [0, 2, 0],\r\n    translateY: [0, -2, 0],\r\n    transition: {\r\n      duration: 0.5,\r\n    },\r\n  },\r\n};\r\n\r\nconst pathVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    transition: {\r\n      duration: 0.4,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    pathOffset: [1, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n      opacity: { duration: 0.1 },\r\n    },\r\n  },\r\n};\r\n\r\nconst arrowVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.3,\r\n      opacity: { duration: 0.1, delay: 0.3 },\r\n    },\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    pathOffset: [0.5, 0],\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.3,\r\n      opacity: { duration: 0.1, delay: 0.3 },\r\n    },\r\n  },\r\n};\r\n\r\nconst TrendingUpIcon = forwardRef<TrendingUpIconHandle, TrendingUpIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={svgVariants}\r\n          initial=\"normal\"\r\n          animate={controls}\r\n        >\r\n          <motion.polyline\r\n            points=\"22 7 13.5 15.5 8.5 10.5 2 17\"\r\n            variants={pathVariants}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n          />\r\n          <motion.polyline\r\n            points=\"16 7 22 7 22 13\"\r\n            variants={arrowVariants}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n          />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nTrendingUpIcon.displayName = 'TrendingUpIcon';\r\n\r\nexport { TrendingUpIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/trending-up.tsx"
    },
    {
      "path": "registry/new-york/icons/user-icon.tsx",
      "content": "'use client'\r\n\r\nimport type { Variants } from 'motion/react'\r\nimport { motion, useAnimation } from 'motion/react'\r\nimport type { HTMLAttributes } from 'react'\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\nexport interface UserIconHandle {\r\n  startAnimation: () => void\r\n  stopAnimation: () => void\r\n}\r\n\r\ninterface UserIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number\r\n}\r\n\r\nconst pathVariant: Variants = {\r\n  normal: { pathLength: 1, opacity: 1, pathOffset: 0 },\r\n  animate: {\r\n    pathLength: [0, 1],\r\n    opacity: [0, 1],\r\n    pathOffset: [1, 0],\r\n  },\r\n}\r\n\r\nconst circleVariant: Variants = {\r\n  normal: {\r\n    pathLength: 1,\r\n    pathOffset: 0,\r\n    scale: 1,\r\n  },\r\n  animate: {\r\n    pathLength: [0, 1],\r\n    pathOffset: [1, 0],\r\n    scale: [0.5, 1],\r\n  },\r\n}\r\n\r\nconst UserIcon = forwardRef<UserIconHandle, UserIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation()\r\n    const isControlledRef = useRef(false)\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      }\r\n    })\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate')\r\n        } else {\r\n          onMouseEnter?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    )\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal')\r\n        } else {\r\n          onMouseLeave?.(e)\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    )\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.circle cx=\"12\" cy=\"8\" r=\"5\" animate={controls} variants={circleVariant} />\r\n          <motion.path\r\n            d=\"M20 21a8 8 0 0 0-16 0\"\r\n            variants={pathVariant}\r\n            transition={{\r\n              delay: 0.2,\r\n              duration: 0.4,\r\n            }}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nUserIcon.displayName = 'UserIcon'\r\n\r\nexport { UserIcon }\r\n",
      "type": "registry:component",
      "target": "components/icons/user-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/user-round-plus.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface UserRoundPlusIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface UserRoundPlusIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst verticalBarVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.2,\r\n      opacity: { duration: 0.1, delay: 0.3 },\r\n    },\r\n  },\r\n};\r\n\r\nconst horizontalBarVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    transition: {\r\n      delay: 0.6,\r\n      duration: 0.2,\r\n      opacity: { duration: 0.1, delay: 0.6 },\r\n    },\r\n  },\r\n};\r\n\r\nconst UserRoundPlusIcon = forwardRef<\r\n  UserRoundPlusIconHandle,\r\n  UserRoundPlusIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <motion.svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        initial=\"normal\"\r\n      >\r\n        <path d=\"M2 21a8 8 0 0 1 13.292-6\" />\r\n        <circle cx=\"10\" cy=\"8\" r=\"5\" />\r\n        <motion.path\r\n          d=\"M19 16v6\"\r\n          variants={verticalBarVariants}\r\n          initial=\"normal\"\r\n          animate={controls}\r\n        />\r\n        <motion.path\r\n          d=\"M22 19h-6\"\r\n          variants={horizontalBarVariants}\r\n          initial=\"normal\"\r\n          animate={controls}\r\n        />\r\n      </motion.svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nUserRoundPlusIcon.displayName = 'UserRoundPlusIcon';\r\n\r\nexport { UserRoundPlusIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/user-round-plus.tsx"
    },
    {
      "path": "registry/new-york/icons/users.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface UsersIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface UsersIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: {\r\n    translateX: 0,\r\n    transition: {\r\n      type: 'spring',\r\n      stiffness: 200,\r\n      damping: 13,\r\n    },\r\n  },\r\n  animate: {\r\n    translateX: [-6, 0],\r\n    transition: {\r\n      delay: 0.1,\r\n      type: 'spring',\r\n      stiffness: 200,\r\n      damping: 13,\r\n    },\r\n  },\r\n};\r\n\r\nconst UsersIcon = forwardRef<UsersIconHandle, UsersIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\r\n          <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n          <motion.path\r\n            d=\"M22 21v-2a4 4 0 0 0-3-3.87\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M16 3.13a4 4 0 0 1 0 7.75\"\r\n            variants={pathVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nUsersIcon.displayName = 'UsersIcon';\r\n\r\nexport { UsersIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/users.tsx"
    },
    {
      "path": "registry/new-york/icons/waves.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface WavesIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface WavesIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst WavesIcon = forwardRef<WavesIconHandle, WavesIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        }\r\n        onMouseEnter?.(e);\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        }\r\n        onMouseLeave?.(e);\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\r\n            initial={{ pathLength: 1 }}\r\n            variants={{\r\n              normal: { pathLength: 1 },\r\n              animate: {\r\n                pathLength: [0, 1],\r\n                transition: { duration: 0.4, ease: 'linear' },\r\n              },\r\n            }}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M2 12c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\r\n            initial={{ pathLength: 1 }}\r\n            variants={{\r\n              normal: { pathLength: 1 },\r\n              animate: {\r\n                pathLength: [0, 1],\r\n                transition: { duration: 0.4, ease: 'linear' },\r\n              },\r\n            }}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M2 18c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\r\n            initial={{ pathLength: 1 }}\r\n            variants={{\r\n              normal: { pathLength: 1 },\r\n              animate: {\r\n                pathLength: [0, 1],\r\n                transition: { duration: 0.4, ease: 'linear' },\r\n              },\r\n            }}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nWavesIcon.displayName = 'WavesIcon';\r\nexport { WavesIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/waves.tsx"
    },
    {
      "path": "registry/new-york/icons/x.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface XIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface XIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n  },\r\n};\r\n\r\nconst XIcon = forwardRef<XIconHandle, XIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={pathVariants}\r\n            animate={controls}\r\n            d=\"M18 6 6 18\"\r\n          />\r\n          <motion.path\r\n            transition={{ delay: 0.2 }}\r\n            variants={pathVariants}\r\n            animate={controls}\r\n            d=\"m6 6 12 12\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nXIcon.displayName = 'XIcon';\r\n\r\nexport { XIcon };\r\n",
      "type": "registry:component",
      "target": "components/icons/x.tsx"
    }
  ]
}
