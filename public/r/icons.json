{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons",
  "type": "registry:ui",
  "title": "Icons",
  "description": "A collection of icons for wireframe components.",
  "dependencies": ["motion"],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/icons/index.tsx",
      "content": "export { ActivityIcon, type ActivityIconHandle } from './activity'\nexport { AlignCenterIcon, type AlignCenterIconHandle } from './align-center-icon'\nexport { ArrowDownIcon, type ArrowDownIconHandle } from './arrow-down'\nexport { ArrowLeftIcon } from './arrow-left'\nexport { ArrowRightIcon } from './arrow-right'\nexport { ArrowUpIcon, type ArrowUpIconHandle } from './arrow-up'\nexport { AudioLinesIcon, type AudioLinesIconHandle } from './audio-lines-icon'\nexport { BadgeAlertIcon, type BadgeAlertIconHandle } from './badge-alert'\nexport { BellIcon, type BellIconHandle } from './bell-icon'\nexport { CalendarDaysIcon, type CalendarDaysIconHandle } from './calendar-days'\nexport { CartIcon, type CartIconHandle } from './cart'\nexport { CheckIcon, type CheckIconHandle } from './check'\nexport { ChevronDownIcon, type ChevronDownIconHandle } from './chevron-down'\nexport { ChevronLeftIcon } from './chevron-left'\nexport { ChevronRightIcon } from './chevron-right'\nexport { ChevronUpIcon } from './chevron-up'\nexport { CircleDashedIcon } from './circle-dashed'\nexport { CircleHelpIcon, type CircleHelpIconHandle } from './circle-help-icon'\nexport { ClapIcon, type ClapIconHandle } from './clap-icon'\nexport { ClipboardCheckIcon, type ClipboardCheckIconHandle } from './copy-check'\nexport { CursorClickIcon } from './cursor'\nexport { DollarSignIcon, type DollarSignIconHandle } from './dollar-sign'\nexport { GalleryThumbnailsIcon, type GalleryThumbnailsIconHandle } from './gallery-thumbnails-icon'\nexport {\n  GalleryVerticalEndIcon,\n  type GalleryVerticalEndIconHandle,\n} from './gallery-vertical-end-icon'\nexport { HeartIcon, type HeartIconHandle } from './heart'\nexport { IdCardIcon, type IdCardIconHandle } from './id-card-icon'\nexport { LinkIcon, type LinkIconHandle } from './link'\nexport { LockIcon, type LockIconHandle } from './lock'\nexport { MailCheckIcon, type MailCheckIconHandle } from './mail-check'\nexport { MapPinIcon, type MapPinIconHandle } from './map-pin'\nexport {\n  MessageCircleDashedIcon,\n  type MessageCircleDashedIconHandle,\n} from './message-circle-dashed-icon'\nexport { MessageCircleIcon, type MessageCircleIconHandle } from './message-circle'\nexport { PanelLeftCloseIcon } from './panel-left-close'\nexport { PanelLeftOpenIcon } from './panel-left-open'\nexport { PlayIcon, type PlayIconHandle } from './play'\nexport { PlusIcon } from './plus'\nexport { SearchIcon, type SearchIconHandle } from './search'\nexport { SparklesIcon, type SparklesIconHandle } from './sparkles'\nexport { SquarePenIcon } from './square-pen'\nexport { TrendingUpIcon, type TrendingUpIconHandle } from './trending-up'\nexport { UserIcon, type UserIconHandle } from './user-icon'\nexport { UserRoundPlusIcon, type UserRoundPlusIconHandle } from './user-round-plus'\nexport { UsersIcon, type UsersIconHandle } from './users'\nexport { WavesIcon, type WavesIconHandle } from './waves'\nexport { XIcon } from './x'\n",
      "type": "registry:component",
      "target": "components/icons/index.tsx"
    },
    {
      "path": "registry/new-york/icons/activity.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ActivityIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ActivityIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst variants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    pathOffset: 0,\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      duration: 0.6,\n      ease: 'linear',\n      opacity: { duration: 0.1 },\n    },\n  },\n}\n\nconst ActivityIcon = forwardRef<ActivityIconHandle, ActivityIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            variants={variants}\n            animate={controls}\n            initial=\"normal\"\n            d=\"M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nActivityIcon.displayName = 'ActivityIcon'\n\nexport { ActivityIcon }\n",
      "type": "registry:component",
      "target": "components/icons/activity.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-down.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ArrowDownIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ArrowDownIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: { d: 'm19 12-7 7-7-7', translateY: 0 },\n  animate: {\n    d: 'm19 12-7 7-7-7',\n    translateY: [0, -3, 0],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst secondPathVariants: Variants = {\n  normal: { d: 'M12 5v14' },\n  animate: {\n    d: ['M12 5v14', 'M12 5v9', 'M12 5v14'],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst ArrowDownIcon = forwardRef<ArrowDownIconHandle, ArrowDownIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path d=\"m19 12-7 7-7-7\" variants={pathVariants} animate={controls} />\n          <motion.path d=\"M12 5v14\" variants={secondPathVariants} animate={controls} />\n        </svg>\n      </div>\n    )\n  }\n)\n\nArrowDownIcon.displayName = 'ArrowDownIcon'\n\nexport { ArrowDownIcon }\n",
      "type": "registry:component",
      "target": "components/icons/arrow-down.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-left.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ArrowLeftIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ArrowLeftIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: { d: 'm12 19-7-7 7-7', translateX: 0 },\n  animate: {\n    d: 'm12 19-7-7 7-7',\n    translateX: [0, 3, 0],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst secondPathVariants: Variants = {\n  normal: { d: 'M19 12H5' },\n  animate: {\n    d: ['M19 12H5', 'M19 12H10', 'M19 12H5'],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst ArrowLeftIcon = forwardRef<ArrowLeftIconHandle, ArrowLeftIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path d=\"m12 19-7-7 7-7\" variants={pathVariants} animate={controls} />\n          <motion.path d=\"M19 12H5\" variants={secondPathVariants} animate={controls} />\n        </svg>\n      </div>\n    )\n  }\n)\n\nArrowLeftIcon.displayName = 'ArrowLeftIcon'\n\nexport { ArrowLeftIcon }\n",
      "type": "registry:component",
      "target": "components/icons/arrow-left.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-right.tsx",
      "content": "'use client'\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ArrowRightIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ArrowRightIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: { d: 'M5 12h14' },\n  animate: {\n    d: ['M5 12h14', 'M5 12h9', 'M5 12h14'],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst secondaryPathVariants: Variants = {\n  normal: { d: 'm12 5 7 7-7 7', translateX: 0 },\n  animate: {\n    d: 'm12 5 7 7-7 7',\n    translateX: [0, -3, 0],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst ArrowRightIcon = forwardRef<ArrowRightIconHandle, ArrowRightIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path d=\"M5 12h14\" variants={pathVariants} animate={controls} />\n          <motion.path d=\"m12 5 7 7-7 7\" variants={secondaryPathVariants} animate={controls} />\n        </svg>\n      </div>\n    )\n  }\n)\n\nArrowRightIcon.displayName = 'ArrowRightIcon'\n\nexport { ArrowRightIcon }\n",
      "type": "registry:component",
      "target": "components/icons/arrow-right.tsx"
    },
    {
      "path": "registry/new-york/icons/arrow-up.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ArrowUpIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ArrowUpIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: { d: 'm5 12 7-7 7 7', translateY: 0 },\n  animate: {\n    d: 'm5 12 7-7 7 7',\n    translateY: [0, 3, 0],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst secondPathVariants: Variants = {\n  normal: { d: 'M12 19V5' },\n  animate: {\n    d: ['M12 19V5', 'M12 19V10', 'M12 19V5'],\n    transition: {\n      duration: 0.4,\n    },\n  },\n}\n\nconst ArrowUpIcon = forwardRef<ArrowUpIconHandle, ArrowUpIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path d=\"m5 12 7-7 7 7\" variants={pathVariants} animate={controls} />\n          <motion.path d=\"M12 19V5\" variants={secondPathVariants} animate={controls} />\n        </svg>\n      </div>\n    )\n  }\n)\n\nArrowUpIcon.displayName = 'ArrowUpIcon'\n\nexport { ArrowUpIcon }\n",
      "type": "registry:component",
      "target": "components/icons/arrow-up.tsx"
    },
    {
      "path": "registry/new-york/icons/audio-lines-icon.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface AudioLinesIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface AudioLinesIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst AudioLinesIcon = forwardRef<AudioLinesIconHandle, AudioLinesIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M2 10v3\" />\n          <motion.path\n            variants={{\n              normal: { d: 'M6 6v11' },\n              animate: {\n                d: ['M6 6v11', 'M6 10v3', 'M6 6v11'],\n                transition: {\n                  duration: 1.5,\n                  repeat: Infinity,\n                },\n              },\n            }}\n            d=\"M6 6v11\"\n            animate={controls}\n          />\n          <motion.path\n            variants={{\n              normal: { d: 'M10 3v18' },\n              animate: {\n                d: ['M10 3v18', 'M10 9v5', 'M10 3v18'],\n                transition: {\n                  duration: 1,\n                  repeat: Infinity,\n                },\n              },\n            }}\n            d=\"M10 3v18\"\n            animate={controls}\n          />\n          <motion.path\n            variants={{\n              normal: { d: 'M14 8v7' },\n              animate: {\n                d: ['M14 8v7', 'M14 6v11', 'M14 8v7'],\n                transition: {\n                  duration: 0.8,\n                  repeat: Infinity,\n                },\n              },\n            }}\n            d=\"M14 8v7\"\n            animate={controls}\n          />\n          <motion.path\n            variants={{\n              normal: { d: 'M18 5v13' },\n              animate: {\n                d: ['M18 5v13', 'M18 7v9', 'M18 5v13'],\n                transition: {\n                  duration: 1.5,\n                  repeat: Infinity,\n                },\n              },\n            }}\n            d=\"M18 5v13\"\n            animate={controls}\n          />\n          <path d=\"M22 10v3\" />\n        </svg>\n      </div>\n    )\n  }\n)\n\nAudioLinesIcon.displayName = 'AudioLinesIcon'\n\nexport { AudioLinesIcon }\n",
      "type": "registry:component",
      "target": "components/icons/audio-lines-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/badge-alert.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface BadgeAlertIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface BadgeAlertIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst iconVariants: Variants = {\n  normal: { scale: 1, rotate: 0 },\n  animate: {\n    scale: [1, 1.1, 1.1, 1.1, 1],\n    rotate: [0, -3, 3, -2, 2, 0],\n    transition: {\n      duration: 0.5,\n      times: [0, 0.2, 0.4, 0.6, 1],\n      ease: 'easeInOut',\n    },\n  },\n}\nconst BadgeAlertIcon = forwardRef<BadgeAlertIconHandle, BadgeAlertIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          variants={iconVariants}\n        >\n          <path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z\" />\n          <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\" />\n          <line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\" />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nBadgeAlertIcon.displayName = 'BadgeAlertIcon'\n\nexport { BadgeAlertIcon }\n",
      "type": "registry:component",
      "target": "components/icons/badge-alert.tsx"
    },
    {
      "path": "registry/new-york/icons/calendar-days.tsx",
      "content": "'use client'\n\nimport { AnimatePresence, motion, useAnimation } from 'motion/react'\nimport type { Variants } from 'motion/react'\nimport { useCallback, useImperativeHandle, useRef } from 'react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface CalendarDaysIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface CalendarDaysIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst DOTS = [\n  { cx: 8, cy: 14 },\n  { cx: 12, cy: 14 },\n  { cx: 16, cy: 14 },\n  { cx: 8, cy: 18 },\n  { cx: 12, cy: 18 },\n  { cx: 16, cy: 18 },\n]\n\nconst variants: Variants = {\n  normal: {\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  animate: (i: number) => ({\n    opacity: [1, 0.3, 1],\n    transition: {\n      delay: i * 0.1,\n      duration: 0.4,\n      times: [0, 0.5, 1],\n    },\n  }),\n}\n\nconst CalendarDaysIcon = forwardRef<CalendarDaysIconHandle, CalendarDaysIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M8 2v4\" />\n          <path d=\"M16 2v4\" />\n          <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" />\n          <path d=\"M3 10h18\" />\n          <AnimatePresence>\n            {DOTS.map((dot, index) => (\n              <motion.circle\n                key={`${dot.cx}-${dot.cy}`}\n                cx={dot.cx}\n                cy={dot.cy}\n                r=\"1\"\n                fill=\"currentColor\"\n                stroke=\"none\"\n                initial=\"normal\"\n                variants={variants}\n                animate={controls}\n                custom={index}\n              />\n            ))}\n          </AnimatePresence>\n        </svg>\n      </div>\n    )\n  }\n)\n\nCalendarDaysIcon.displayName = 'CalendarDaysIcon'\n\nexport { CalendarDaysIcon }\n",
      "type": "registry:component",
      "target": "components/icons/calendar-days.tsx"
    },
    {
      "path": "registry/new-york/icons/cart.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface CartIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface CartIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst cartVariants: Variants = {\n  normal: { scale: 1 },\n  animate: {\n    scale: 1.1,\n    y: [0, -5, 0],\n    transition: {\n      duration: 0.3,\n      ease: 'easeInOut',\n      y: { repeat: 1, delay: 0.1, duration: 0.4 },\n    },\n  },\n}\n\nconst CartIcon = forwardRef<CartIconHandle, CartIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={cartVariants}\n          animate={controls}\n          transition={{ duration: 0.2 }}\n        >\n          <path d=\"M6.29977 5H21L19 12H7.37671M20 16H8L6 3H3M9 20C9 20.5523 8.55228 21 8 21C7.44772 21 7 20.5523 7 20C7 19.4477 7.44772 19 8 19C8.55228 19 9 19.4477 9 20ZM20 20C20 20.5523 19.5523 21 19 21C18.4477 21 18 20.5523 18 20C18 19.4477 18.4477 19 19 19C19.5523 19 20 19.4477 20 20Z\" />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nCartIcon.displayName = 'CartIcon'\n\nexport { CartIcon }\n",
      "type": "registry:component",
      "target": "components/icons/cart.tsx"
    },
    {
      "path": "registry/new-york/icons/check.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface CheckIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface CheckIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    scale: 1,\n    transition: {\n      duration: 0.3,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    scale: [0.5, 1],\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n}\n\nconst CheckIcon = forwardRef<CheckIconHandle, CheckIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            variants={pathVariants}\n            initial=\"normal\"\n            animate={controls}\n            d=\"M4 12 9 17L20 6\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nCheckIcon.displayName = 'CheckIcon'\n\nexport { CheckIcon }\n",
      "type": "registry:component",
      "target": "components/icons/check.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-down.tsx",
      "content": "'use client'\n\nimport type { Transition } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ChevronDownIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ChevronDownIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst defaultTransition: Transition = {\n  times: [0, 0.4, 1],\n  duration: 0.5,\n}\n\nconst ChevronDownIcon = forwardRef<ChevronDownIconHandle, ChevronDownIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            variants={{\n              normal: { y: 0 },\n              animate: { y: [0, 2, 0] },\n            }}\n            transition={defaultTransition}\n            animate={controls}\n            d=\"m6 9 6 6 6-6\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nChevronDownIcon.displayName = 'ChevronDownIcon'\n\nexport { ChevronDownIcon }\n",
      "type": "registry:component",
      "target": "components/icons/chevron-down.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-left.tsx",
      "content": "'use client'\n\nimport type { Transition } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ChevronLeftIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ChevronLeftIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst defaultTransition: Transition = {\n  times: [0, 0.4, 1],\n  duration: 0.5,\n}\n\nconst ChevronLeftIcon = forwardRef<ChevronLeftIconHandle, ChevronLeftIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            variants={{\n              normal: { x: 0 },\n              animate: { x: [0, -2, 0] },\n            }}\n            transition={defaultTransition}\n            animate={controls}\n            d=\"m15 18-6-6 6-6\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nChevronLeftIcon.displayName = 'ChevronLeftIcon'\n\nexport { ChevronLeftIcon }\n",
      "type": "registry:component",
      "target": "components/icons/chevron-left.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-right.tsx",
      "content": "'use client'\n\nimport type { Transition } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ChevronRightIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ChevronRightIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst defaultTransition: Transition = {\n  times: [0, 0.4, 1],\n  duration: 0.5,\n}\n\nconst ChevronRightIcon = forwardRef<ChevronRightIconHandle, ChevronRightIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            variants={{\n              normal: { x: 0 },\n              animate: { x: [0, 2, 0] },\n            }}\n            transition={defaultTransition}\n            animate={controls}\n            d=\"m9 18 6-6-6-6\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nChevronRightIcon.displayName = 'ChevronRightIcon'\n\nexport { ChevronRightIcon }\n",
      "type": "registry:component",
      "target": "components/icons/chevron-right.tsx"
    },
    {
      "path": "registry/new-york/icons/chevron-up.tsx",
      "content": "'use client'\n\nimport type { Transition } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ChevronUpIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ChevronUpIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst defaultTransition: Transition = {\n  times: [0, 0.4, 1],\n  duration: 0.5,\n}\n\nconst ChevronUpIcon = forwardRef<ChevronUpIconHandle, ChevronUpIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            variants={{\n              normal: { y: 0 },\n              animate: { y: [0, -2, 0] },\n            }}\n            transition={defaultTransition}\n            animate={controls}\n            d=\"m18 15-6-6-6 6\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nChevronUpIcon.displayName = 'ChevronUpIcon'\n\nexport { ChevronUpIcon }\n",
      "type": "registry:component",
      "target": "components/icons/chevron-up.tsx"
    },
    {
      "path": "registry/new-york/icons/circle-dashed.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface CircleDashedIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface CircleDashedIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: { opacity: 1 },\n  animate: (i: number) => ({\n    opacity: [0, 1],\n    transition: { delay: i * 0.1, duration: 0.3 },\n  }),\n}\n\nconst CircleDashedIcon = forwardRef<CircleDashedIconHandle, CircleDashedIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          {[\n            'M10.1 2.182a10 10 0 0 1 3.8 0',\n            'M13.9 21.818a10 10 0 0 1-3.8 0',\n            'M17.609 3.721a10 10 0 0 1 2.69 2.7',\n            'M2.182 13.9a10 10 0 0 1 0-3.8',\n            'M20.279 17.609a10 10 0 0 1-2.7 2.69',\n            'M21.818 10.1a10 10 0 0 1 0 3.8',\n            'M3.721 6.391a10 10 0 0 1 2.7-2.69',\n            'M6.391 20.279a10 10 0 0 1-2.69-2.7',\n          ].map((d, index) => (\n            <motion.path\n              key={d}\n              d={d}\n              animate={controls}\n              variants={pathVariants}\n              custom={index + 1}\n            />\n          ))}\n        </svg>\n      </div>\n    )\n  }\n)\n\nCircleDashedIcon.displayName = 'CircleDashedIcon'\n\nexport { CircleDashedIcon }\n",
      "type": "registry:component",
      "target": "components/icons/circle-dashed.tsx"
    },
    {
      "path": "registry/new-york/icons/clap-icon.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ClapIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ClapIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst variants: Variants = {\n  normal: {\n    rotate: 0,\n    originX: '4px',\n    originY: '20px',\n  },\n  animate: {\n    rotate: [-10, -10, 0],\n    transition: {\n      duration: 0.8,\n      times: [0, 0.5, 1],\n      ease: 'easeInOut',\n    },\n  },\n}\n\nconst clapVariants: Variants = {\n  normal: {\n    rotate: 0,\n    originX: '3px',\n    originY: '11px',\n  },\n  animate: {\n    rotate: [0, -10, 16, 0],\n    transition: {\n      duration: 0.4,\n      times: [0, 0.3, 0.6, 1],\n      ease: 'easeInOut',\n    },\n  },\n}\n\nconst ClapIcon = forwardRef<ClapIconHandle, ClapIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"currentColor\"\n          stroke=\"none\"\n          style={{ overflow: 'visible' }}\n        >\n          <motion.g animate={controls} variants={variants}>\n            <motion.g animate={controls} variants={clapVariants}>\n              <path d=\"M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z\" />\n            </motion.g>\n            <path d=\"M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z\" />\n          </motion.g>\n        </svg>\n      </div>\n    )\n  }\n)\n\nClapIcon.displayName = 'ClapIcon'\n\nexport { ClapIcon }\n",
      "type": "registry:component",
      "target": "components/icons/clap-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/copy-check.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { Variants } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface ClipboardCheckIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface ClipboardCheckIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst checkVariants: Variants = {\n  normal: {\n    pathLength: 1,\n    opacity: 0,\n    transition: {\n      duration: 0.3,\n    },\n  },\n  animate: {\n    pathLength: [0, 1],\n    opacity: [0, 1],\n    transition: {\n      pathLength: { duration: 0.3, ease: 'easeInOut' },\n      opacity: { duration: 0.3, ease: 'easeInOut' },\n    },\n  },\n}\n\nconst ClipboardCheckIcon = forwardRef<ClipboardCheckIconHandle, ClipboardCheckIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <rect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" />\n          <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" />\n          <motion.path\n            animate={controls}\n            initial=\"normal\"\n            variants={checkVariants}\n            d=\"m9 14 2 2 4-4\"\n            style={{ transformOrigin: 'center' }}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nClipboardCheckIcon.displayName = 'ClipboardCheckIcon'\n\nexport { ClipboardCheckIcon }\n",
      "type": "registry:component",
      "target": "components/icons/copy-check.tsx"
    },
    {
      "path": "registry/new-york/icons/cursor.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface CursorClickIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface CursorClickIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst cursorVariants: Variants = {\n  initial: { x: 0, y: 0 },\n  hover: {\n    x: [0, 0, -3, 0],\n    y: [0, -4, 0, 0],\n    transition: {\n      duration: 1,\n      bounce: 0.3,\n    },\n  },\n}\n\nconst lineVariants: Variants = {\n  initial: { opacity: 1, x: 0, y: 0 },\n  spread: (custom: { x: number; y: number }) => ({\n    opacity: [0, 1, 0, 0, 0, 0, 1],\n    x: [0, custom.x, 0, 0],\n    y: [0, custom.y, 0, 0],\n    transition: {\n      type: 'spring',\n      stiffness: 70,\n      damping: 10,\n      mass: 0.4,\n    },\n  }),\n}\n\nconst CursorClickIcon = forwardRef<CursorClickIconHandle, CursorClickIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const clickControls = useAnimation()\n    const cursorControls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => {\n          cursorControls.start('hover')\n          clickControls.start('spread', { delay: 1.3 })\n        },\n        stopAnimation: () => {\n          cursorControls.start('initial')\n          clickControls.start('initial')\n        },\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          cursorControls.start('hover')\n          clickControls.start('spread', { delay: 1.3 })\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [clickControls, cursorControls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          cursorControls.start('initial')\n          clickControls.start('initial')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [cursorControls, clickControls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z\"\n            variants={cursorVariants}\n            animate={cursorControls}\n          />\n          <motion.path\n            d=\"M14 4.1 12 6\"\n            variants={lineVariants}\n            animate={clickControls}\n            custom={{ x: 1, y: -1 }}\n          />\n          <motion.path\n            d=\"m5.1 8-2.9-.8\"\n            variants={lineVariants}\n            animate={clickControls}\n            custom={{ x: -1, y: 0 }}\n          />\n          <motion.path\n            d=\"m6 12-1.9 2\"\n            variants={lineVariants}\n            animate={clickControls}\n            custom={{ x: -1, y: 1 }}\n          />\n          <motion.path\n            d=\"M7.2 2.2 8 5.1\"\n            variants={lineVariants}\n            animate={clickControls}\n            custom={{ x: 0, y: -1 }}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nCursorClickIcon.displayName = 'CursorClickIcon'\n\nexport { CursorClickIcon }\n",
      "type": "registry:component",
      "target": "components/icons/cursor.tsx"
    },
    {
      "path": "registry/new-york/icons/dollar-sign.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface DollarSignIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface DollarSignIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst DOLLAR_MAIN_VARIANTS: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    transition: {\n      duration: 0.6,\n      opacity: { duration: 0.1 },\n    },\n  },\n}\n\nconst DOLLAR_SECONDARY_VARIANTS: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    pathOffset: 0,\n    transition: {\n      delay: 0.3,\n      duration: 0.3,\n      opacity: { duration: 0.1, delay: 0.3 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      delay: 0.5,\n      duration: 0.4,\n      opacity: { duration: 0.1, delay: 0.5 },\n    },\n  },\n}\n\nconst DollarSignIcon = forwardRef<DollarSignIconHandle, DollarSignIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"\n            initial=\"normal\"\n            animate={controls}\n            variants={DOLLAR_MAIN_VARIANTS}\n          />\n          <motion.path\n            d=\"M12 22 L12 2\"\n            initial=\"normal\"\n            animate={controls}\n            variants={DOLLAR_SECONDARY_VARIANTS}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nDollarSignIcon.displayName = 'DollarSignIcon'\n\nexport { DollarSignIcon }\n",
      "type": "registry:component",
      "target": "components/icons/dollar-sign.tsx"
    },
    {
      "path": "registry/new-york/icons/gallery-thumbnails-icon.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface GalleryThumbnailsIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface GalleryThumbnailsIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: { opacity: 1 },\n  animate: (i: number) => ({\n    opacity: [0, 1],\n    transition: { delay: i * 0.15, duration: 0.2 },\n  }),\n}\n\nconst GalleryThumbnailsIcon = forwardRef<GalleryThumbnailsIconHandle, GalleryThumbnailsIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <rect width=\"18\" height=\"14\" x=\"3\" y=\"3\" rx=\"2\" />\n          {['M4 21h1', 'M9 21h1', 'M14 21h1', 'M19 21h1'].map((d, index) => (\n            <motion.path\n              key={d}\n              d={d}\n              animate={controls}\n              variants={pathVariants}\n              custom={index + 1}\n            />\n          ))}\n        </svg>\n      </div>\n    )\n  }\n)\n\nGalleryThumbnailsIcon.displayName = 'GalleryThumbnailsIcon'\n\nexport { GalleryThumbnailsIcon }\n",
      "type": "registry:component",
      "target": "components/icons/gallery-thumbnails-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/heart.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface HeartIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface HeartIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst HeartIcon = forwardRef<HeartIconHandle, HeartIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          variants={{\n            normal: { scale: 1 },\n            animate: { scale: [1, 1.08, 1] },\n          }}\n          transition={{\n            duration: 0.45,\n            repeat: 2,\n          }}\n        >\n          <path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\" />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nHeartIcon.displayName = 'HeartIcon'\n\nexport { HeartIcon }\n",
      "type": "registry:component",
      "target": "components/icons/heart.tsx"
    },
    {
      "path": "registry/new-york/icons/link.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface LinkIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface LinkIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  initial: { pathLength: 1, pathOffset: 0, rotate: 0 },\n  animate: {\n    pathLength: [1, 0.97, 1, 0.97, 1],\n    pathOffset: [0, 0.05, 0, 0.05, 0],\n    rotate: [0, -5, 0],\n    transition: {\n      rotate: {\n        duration: 0.5,\n      },\n      duration: 1,\n      times: [0, 0.2, 0.4, 0.6, 1],\n      ease: 'easeInOut',\n    },\n  },\n}\n\nconst LinkIcon = forwardRef<LinkIconHandle, LinkIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\n            variants={pathVariants}\n            animate={controls}\n          />\n          <motion.path\n            d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\n            variants={pathVariants}\n            animate={controls}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nLinkIcon.displayName = 'LinkIcon'\n\nexport { LinkIcon }\n",
      "type": "registry:component",
      "target": "components/icons/link.tsx"
    },
    {
      "path": "registry/new-york/icons/lock.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface LockIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface LockIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst LockIcon = forwardRef<LockIconHandle, LockIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial=\"normal\"\n          variants={{\n            normal: {\n              rotate: 0,\n              scale: 1,\n            },\n            animate: {\n              rotate: [-3, 1, -2, 0],\n              scale: [0.95, 1.05, 0.98, 1],\n            },\n          }}\n          transition={{\n            duration: 1,\n            ease: [0.4, 0, 0.2, 1],\n          }}\n          animate={controls}\n        >\n          <rect width=\"18\" height=\"11\" x=\"3\" y=\"11\" rx=\"2\" ry=\"2\" />\n          <motion.path\n            d=\"M7 11V7a5 5 0 0 1 10 0v4\"\n            initial=\"normal\"\n            variants={{\n              normal: {\n                pathLength: 1,\n              },\n              animate: {\n                pathLength: 0.7,\n              },\n            }}\n            transition={{\n              duration: 0.3,\n              ease: [0.4, 0, 0.2, 1],\n            }}\n            animate={controls}\n          />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nLockIcon.displayName = 'LockIcon'\n\nexport { LockIcon }\n",
      "type": "registry:component",
      "target": "components/icons/lock.tsx"
    },
    {
      "path": "registry/new-york/icons/mail-check.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { Variants } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface MailCheckIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface MailCheckIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst checkVariants: Variants = {\n  normal: {\n    pathLength: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.3,\n    },\n  },\n  animate: {\n    pathLength: [0, 1],\n    opacity: [0, 1],\n    transition: {\n      pathLength: { duration: 0.4, ease: 'easeInOut' },\n      opacity: { duration: 0.4, ease: 'easeInOut' },\n    },\n  },\n}\n\nconst MailCheckIcon = forwardRef<MailCheckIconHandle, MailCheckIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8\" />\n          <path d=\"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\" />\n          <motion.path\n            animate={controls}\n            initial=\"normal\"\n            variants={checkVariants}\n            d=\"m16 19 2 2 4-4\"\n            style={{ transformOrigin: 'center' }}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nMailCheckIcon.displayName = 'MailCheckIcon'\n\nexport { MailCheckIcon }\n",
      "type": "registry:component",
      "target": "components/icons/mail-check.tsx"
    },
    {
      "path": "registry/new-york/icons/map-pin.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface MapPinIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface MapPinIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst svgVariants: Variants = {\n  normal: {\n    y: 0,\n  },\n  animate: {\n    y: [0, -5, -3],\n    transition: {\n      duration: 0.5,\n      times: [0, 0.6, 1],\n    },\n  },\n}\n\nconst circleVariants: Variants = {\n  normal: {\n    opacity: 1,\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [0.5, 0],\n    transition: {\n      delay: 0.3,\n      duration: 0.5,\n      opacity: { duration: 0.1, delay: 0.3 },\n    },\n  },\n}\n\nconst MapPinIcon = forwardRef<MapPinIconHandle, MapPinIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={svgVariants}\n          initial=\"normal\"\n          animate={controls}\n        >\n          <path d=\"M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0\" />\n          <motion.circle\n            cx=\"12\"\n            cy=\"10\"\n            r=\"3\"\n            variants={circleVariants}\n            initial=\"normal\"\n            animate={controls}\n          />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nMapPinIcon.displayName = 'MapPinIcon'\n\nexport { MapPinIcon }\n",
      "type": "registry:component",
      "target": "components/icons/map-pin.tsx"
    },
    {
      "path": "registry/new-york/icons/message-circle.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface MessageCircleIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface MessageCircleIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst iconVariants: Variants = {\n  normal: {\n    scale: 1,\n    rotate: 0,\n  },\n  animate: {\n    scale: 1.05,\n    rotate: [0, -7, 7, 0],\n    transition: {\n      rotate: {\n        duration: 0.5,\n        ease: 'easeInOut',\n      },\n      scale: {\n        type: 'spring',\n        stiffness: 400,\n        damping: 10,\n      },\n    },\n  },\n}\n\nconst MessageCircleIcon = forwardRef<MessageCircleIconHandle, MessageCircleIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={iconVariants}\n          animate={controls}\n        >\n          <path d=\"M7.9 20A9 9 0 1 0 4 16.1L2 22Z\" />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nMessageCircleIcon.displayName = 'MessageCircleIcon'\n\nexport { MessageCircleIcon }\n",
      "type": "registry:component",
      "target": "components/icons/message-circle.tsx"
    },
    {
      "path": "registry/new-york/icons/panel-left-close.tsx",
      "content": "'use client'\n\nimport type { Transition, Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface PanelLeftCloseIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface PanelLeftCloseIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst defaultTransition: Transition = {\n  times: [0, 0.4, 1],\n  duration: 0.5,\n}\n\nconst pathVariants: Variants = {\n  normal: { x: 0 },\n  animate: { x: [0, -1.5, 0] },\n}\n\nconst PanelLeftCloseIcon = forwardRef<PanelLeftCloseIconHandle, PanelLeftCloseIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" />\n          <path d=\"M9 3v18\" />\n          <motion.path\n            transition={defaultTransition}\n            variants={pathVariants}\n            animate={controls}\n            d=\"m16 15-3-3 3-3\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nPanelLeftCloseIcon.displayName = 'PanelLeftCloseIcon'\n\nexport { PanelLeftCloseIcon }\n",
      "type": "registry:component",
      "target": "components/icons/panel-left-close.tsx"
    },
    {
      "path": "registry/new-york/icons/panel-left-open.tsx",
      "content": "'use client'\n\nimport type { Transition, Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface PanelLeftOpenIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface PanelLeftOpenIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst defaultTransition: Transition = {\n  times: [0, 0.4, 1],\n  duration: 0.5,\n}\n\nconst pathVariants: Variants = {\n  normal: { x: 0 },\n  animate: { x: [0, 1.5, 0] },\n}\n\nconst PanelLeftOpenIcon = forwardRef<PanelLeftOpenIconHandle, PanelLeftOpenIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" />\n          <path d=\"M9 3v18\" />\n          <motion.path\n            transition={defaultTransition}\n            variants={pathVariants}\n            animate={controls}\n            d=\"m14 9 3 3-3 3\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nPanelLeftOpenIcon.displayName = 'PanelLeftOpenIcon'\n\nexport { PanelLeftOpenIcon }\n",
      "type": "registry:component",
      "target": "components/icons/panel-left-open.tsx"
    },
    {
      "path": "registry/new-york/icons/play.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface PlayIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface PlayIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: {\n    x: 0,\n    rotate: 0,\n  },\n  animate: {\n    x: [0, -1, 2, 0],\n    rotate: [0, -10, 0, 0],\n    transition: {\n      duration: 0.5,\n      times: [0, 0.2, 0.5, 1],\n      stiffness: 260,\n      damping: 20,\n    },\n  },\n}\n\nconst PlayIcon = forwardRef<PlayIconHandle, PlayIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.polygon points=\"6 3 20 12 6 21 6 3\" variants={pathVariants} animate={controls} />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nPlayIcon.displayName = 'PlayIcon'\n\nexport { PlayIcon }\n",
      "type": "registry:component",
      "target": "components/icons/play.tsx"
    },
    {
      "path": "registry/new-york/icons/plus.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface PlusIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface PlusIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst PlusIcon = forwardRef<PlusIconHandle, PlusIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          transition={{ type: 'spring', stiffness: 100, damping: 15 }}\n          variants={{\n            normal: {\n              rotate: 0,\n            },\n            animate: {\n              rotate: 180,\n            },\n          }}\n        >\n          <path d=\"M5 12h14\" />\n          <path d=\"M12 5v14\" />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nPlusIcon.displayName = 'PlusIcon'\n\nexport { PlusIcon }\n",
      "type": "registry:component",
      "target": "components/icons/plus.tsx"
    },
    {
      "path": "registry/new-york/icons/search.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface SearchIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface SearchIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst SearchIcon = forwardRef<SearchIconHandle, SearchIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={{\n            normal: { x: 0, y: 0 },\n            animate: {\n              x: [0, 0, -3, 0],\n              y: [0, -4, 0, 0],\n            },\n          }}\n          transition={{\n            duration: 1,\n            bounce: 0.3,\n          }}\n          animate={controls}\n        >\n          <circle cx=\"11\" cy=\"11\" r=\"8\" />\n          <path d=\"m21 21-4.3-4.3\" />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nSearchIcon.displayName = 'SearchIcon'\n\nexport { SearchIcon }\n",
      "type": "registry:component",
      "target": "components/icons/search.tsx"
    },
    {
      "path": "registry/new-york/icons/sparkles.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface SparklesIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface SparklesIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst sparkleVariants: Variants = {\n  initial: {\n    y: 0,\n    fill: 'none',\n  },\n  hover: {\n    y: [0, -1, 0, 0],\n    fill: 'currentColor',\n    transition: {\n      duration: 1,\n      bounce: 0.3,\n    },\n  },\n}\n\nconst starVariants: Variants = {\n  initial: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n  },\n  blink: () => ({\n    opacity: [0, 1, 0, 0, 0, 0, 1],\n    transition: {\n      duration: 2,\n      type: 'spring',\n      stiffness: 70,\n      damping: 10,\n      mass: 0.4,\n    },\n  }),\n}\n\nconst SparklesIcon = forwardRef<SparklesIconHandle, SparklesIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const starControls = useAnimation()\n    const sparkleControls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => {\n          sparkleControls.start('hover')\n          starControls.start('blink', { delay: 1 })\n        },\n        stopAnimation: () => {\n          sparkleControls.start('initial')\n          starControls.start('initial')\n        },\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          sparkleControls.start('hover')\n          starControls.start('blink', { delay: 1 })\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [onMouseEnter, sparkleControls, starControls]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          sparkleControls.start('initial')\n          starControls.start('initial')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [sparkleControls, starControls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z\"\n            variants={sparkleVariants}\n            animate={sparkleControls}\n          />\n          <motion.path d=\"M20 3v4\" variants={starVariants} animate={starControls} />\n          <motion.path d=\"M22 5h-4\" variants={starVariants} animate={starControls} />\n          <motion.path d=\"M4 17v2\" variants={starVariants} animate={starControls} />\n          <motion.path d=\"M5 18H3\" variants={starVariants} animate={starControls} />\n        </svg>\n      </div>\n    )\n  }\n)\n\nSparklesIcon.displayName = 'SparklesIcon'\n\nexport { SparklesIcon }\n",
      "type": "registry:component",
      "target": "components/icons/sparkles.tsx"
    },
    {
      "path": "registry/new-york/icons/square-pen.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface SquarePenIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface SquarePenIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst penVariants: Variants = {\n  normal: {\n    rotate: 0,\n    x: 0,\n    y: 0,\n  },\n  animate: {\n    rotate: [-0.5, 0.5, -0.5],\n    x: [0, -1, 1.5, 0],\n    y: [0, 1.5, -1, 0],\n  },\n}\n\nconst SquarePenIcon = forwardRef<SquarePenIconHandle, SquarePenIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          style={{ overflow: 'visible' }}\n        >\n          <path d=\"M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n          <motion.path\n            d=\"M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z\"\n            variants={penVariants}\n            animate={controls}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nSquarePenIcon.displayName = 'SquarePenIcon'\n\nexport { SquarePenIcon }\n",
      "type": "registry:component",
      "target": "components/icons/square-pen.tsx"
    },
    {
      "path": "registry/new-york/icons/trending-up.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface TrendingUpIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface TrendingUpIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst svgVariants: Variants = {\n  animate: {\n    x: 0,\n    y: 0,\n    translateX: [0, 2, 0],\n    translateY: [0, -2, 0],\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst pathVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n}\n\nconst arrowVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    transition: {\n      delay: 0.3,\n      duration: 0.3,\n      opacity: { duration: 0.1, delay: 0.3 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [0.5, 0],\n    transition: {\n      delay: 0.3,\n      duration: 0.3,\n      opacity: { duration: 0.1, delay: 0.3 },\n    },\n  },\n}\n\nconst TrendingUpIcon = forwardRef<TrendingUpIconHandle, TrendingUpIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={svgVariants}\n          initial=\"normal\"\n          animate={controls}\n        >\n          <motion.polyline\n            points=\"22 7 13.5 15.5 8.5 10.5 2 17\"\n            variants={pathVariants}\n            initial=\"normal\"\n            animate={controls}\n          />\n          <motion.polyline\n            points=\"16 7 22 7 22 13\"\n            variants={arrowVariants}\n            initial=\"normal\"\n            animate={controls}\n          />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nTrendingUpIcon.displayName = 'TrendingUpIcon'\n\nexport { TrendingUpIcon }\n",
      "type": "registry:component",
      "target": "components/icons/trending-up.tsx"
    },
    {
      "path": "registry/new-york/icons/user-icon.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface UserIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface UserIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariant: Variants = {\n  normal: { pathLength: 1, opacity: 1, pathOffset: 0 },\n  animate: {\n    pathLength: [0, 1],\n    opacity: [0, 1],\n    pathOffset: [1, 0],\n  },\n}\n\nconst circleVariant: Variants = {\n  normal: {\n    pathLength: 1,\n    pathOffset: 0,\n    scale: 1,\n  },\n  animate: {\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    scale: [0.5, 1],\n  },\n}\n\nconst UserIcon = forwardRef<UserIconHandle, UserIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.circle cx=\"12\" cy=\"8\" r=\"5\" animate={controls} variants={circleVariant} />\n          <motion.path\n            d=\"M20 21a8 8 0 0 0-16 0\"\n            variants={pathVariant}\n            transition={{\n              delay: 0.2,\n              duration: 0.4,\n            }}\n            animate={controls}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nUserIcon.displayName = 'UserIcon'\n\nexport { UserIcon }\n",
      "type": "registry:component",
      "target": "components/icons/user-icon.tsx"
    },
    {
      "path": "registry/new-york/icons/user-round-plus.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface UserRoundPlusIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface UserRoundPlusIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst verticalBarVariants: Variants = {\n  normal: {\n    opacity: 1,\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    transition: {\n      delay: 0.3,\n      duration: 0.2,\n      opacity: { duration: 0.1, delay: 0.3 },\n    },\n  },\n}\n\nconst horizontalBarVariants: Variants = {\n  normal: {\n    opacity: 1,\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    transition: {\n      delay: 0.6,\n      duration: 0.2,\n      opacity: { duration: 0.1, delay: 0.6 },\n    },\n  },\n}\n\nconst UserRoundPlusIcon = forwardRef<UserRoundPlusIconHandle, UserRoundPlusIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial=\"normal\"\n        >\n          <path d=\"M2 21a8 8 0 0 1 13.292-6\" />\n          <circle cx=\"10\" cy=\"8\" r=\"5\" />\n          <motion.path\n            d=\"M19 16v6\"\n            variants={verticalBarVariants}\n            initial=\"normal\"\n            animate={controls}\n          />\n          <motion.path\n            d=\"M22 19h-6\"\n            variants={horizontalBarVariants}\n            initial=\"normal\"\n            animate={controls}\n          />\n        </motion.svg>\n      </div>\n    )\n  }\n)\n\nUserRoundPlusIcon.displayName = 'UserRoundPlusIcon'\n\nexport { UserRoundPlusIcon }\n",
      "type": "registry:component",
      "target": "components/icons/user-round-plus.tsx"
    },
    {
      "path": "registry/new-york/icons/users.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface UsersIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface UsersIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: {\n    translateX: 0,\n    transition: {\n      type: 'spring',\n      stiffness: 200,\n      damping: 13,\n    },\n  },\n  animate: {\n    translateX: [-6, 0],\n    transition: {\n      delay: 0.1,\n      type: 'spring',\n      stiffness: 200,\n      damping: 13,\n    },\n  },\n}\n\nconst UsersIcon = forwardRef<UsersIconHandle, UsersIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n          <circle cx=\"9\" cy=\"7\" r=\"4\" />\n          <motion.path d=\"M22 21v-2a4 4 0 0 0-3-3.87\" variants={pathVariants} animate={controls} />\n          <motion.path d=\"M16 3.13a4 4 0 0 1 0 7.75\" variants={pathVariants} animate={controls} />\n        </svg>\n      </div>\n    )\n  }\n)\n\nUsersIcon.displayName = 'UsersIcon'\n\nexport { UsersIcon }\n",
      "type": "registry:component",
      "target": "components/icons/users.tsx"
    },
    {
      "path": "registry/new-york/icons/waves.tsx",
      "content": "'use client'\n\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface WavesIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface WavesIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst WavesIcon = forwardRef<WavesIconHandle, WavesIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        }\n        onMouseEnter?.(e)\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        }\n        onMouseLeave?.(e)\n      },\n      [controls, onMouseLeave]\n    )\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n            initial={{ pathLength: 1 }}\n            variants={{\n              normal: { pathLength: 1 },\n              animate: {\n                pathLength: [0, 1],\n                transition: { duration: 0.4, ease: 'linear' },\n              },\n            }}\n            animate={controls}\n          />\n          <motion.path\n            d=\"M2 12c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n            initial={{ pathLength: 1 }}\n            variants={{\n              normal: { pathLength: 1 },\n              animate: {\n                pathLength: [0, 1],\n                transition: { duration: 0.4, ease: 'linear' },\n              },\n            }}\n            animate={controls}\n          />\n          <motion.path\n            d=\"M2 18c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n            initial={{ pathLength: 1 }}\n            variants={{\n              normal: { pathLength: 1 },\n              animate: {\n                pathLength: [0, 1],\n                transition: { duration: 0.4, ease: 'linear' },\n              },\n            }}\n            animate={controls}\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nWavesIcon.displayName = 'WavesIcon'\nexport { WavesIcon }\n",
      "type": "registry:component",
      "target": "components/icons/waves.tsx"
    },
    {
      "path": "registry/new-york/icons/x.tsx",
      "content": "'use client'\n\nimport type { Variants } from 'motion/react'\nimport { motion, useAnimation } from 'motion/react'\nimport type { HTMLAttributes } from 'react'\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface XIconHandle {\n  startAnimation: () => void\n  stopAnimation: () => void\n}\n\ninterface XIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number\n}\n\nconst pathVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n  },\n}\n\nconst XIcon = forwardRef<XIconHandle, XIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation()\n    const isControlledRef = useRef(false)\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      }\n    })\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate')\n        } else {\n          onMouseEnter?.(e)\n        }\n      },\n      [controls, onMouseEnter]\n    )\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal')\n        } else {\n          onMouseLeave?.(e)\n        }\n      },\n      [controls, onMouseLeave]\n    )\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path variants={pathVariants} animate={controls} d=\"M18 6 6 18\" />\n          <motion.path\n            transition={{ delay: 0.2 }}\n            variants={pathVariants}\n            animate={controls}\n            d=\"m6 6 12 12\"\n          />\n        </svg>\n      </div>\n    )\n  }\n)\n\nXIcon.displayName = 'XIcon'\n\nexport { XIcon }\n",
      "type": "registry:component",
      "target": "components/icons/x.tsx"
    }
  ]
}
