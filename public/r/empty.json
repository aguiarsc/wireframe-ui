{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "empty",
  "type": "registry:ui",
  "title": "Empty State",
  "description": "An empty state component with wireframe helpers for titles, descriptions, and media.",
  "dependencies": ["class-variance-authority"],
  "registryDependencies": ["text", "icons"],
  "files": [
    {
      "path": "registry/new-york/ui/empty.tsx",
      "content": "import { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { Text } from '@/registry/new-york/ui/text'\n\nexport interface EmptyProps extends React.ComponentProps<'div'> {}\n\nfunction Empty({ className, ...props }: EmptyProps) {\n  return (\n    <div\n      data-slot=\"empty\"\n      className={cn(\n        'flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport interface EmptyHeaderProps extends React.ComponentProps<'div'> {}\n\nfunction EmptyHeader({ className, ...props }: EmptyHeaderProps) {\n  return (\n    <div\n      data-slot=\"empty-header\"\n      className={cn('flex max-w-sm flex-col items-center gap-2 text-center', className)}\n      {...props}\n    />\n  )\n}\n\nconst emptyMediaVariants = cva(\n  'flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        icon: \"bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6\",\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n)\n\nexport interface EmptyMediaProps\n  extends React.ComponentProps<'div'>,\n    VariantProps<typeof emptyMediaVariants> {}\n\nfunction EmptyMedia({ className, variant = 'default', ...props }: EmptyMediaProps) {\n  return (\n    <div\n      data-slot=\"empty-icon\"\n      data-variant={variant}\n      className={cn(emptyMediaVariants({ variant, className }))}\n      {...props}\n    />\n  )\n}\n\nexport interface EmptyTitleProps extends React.ComponentProps<'div'> {}\n\nfunction EmptyTitle({ className, ...props }: EmptyTitleProps) {\n  return (\n    <div\n      data-slot=\"empty-title\"\n      className={cn('text-lg font-medium tracking-tight', className)}\n      {...props}\n    />\n  )\n}\n\nexport interface EmptyDescriptionProps extends React.ComponentProps<'p'> {}\n\nfunction EmptyDescription({ className, ...props }: EmptyDescriptionProps) {\n  return (\n    <div\n      data-slot=\"empty-description\"\n      className={cn(\n        'text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport interface EmptyContentProps extends React.ComponentProps<'div'> {}\n\nfunction EmptyContent({ className, ...props }: EmptyContentProps) {\n  return (\n    <div\n      data-slot=\"empty-content\"\n      className={cn(\n        'flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\n// Wireframe helper components\nfunction EmptyTitleWireframe({\n  width = 'md',\n  className,\n  ...props\n}: Omit<React.ComponentProps<'div'>, 'children'> & {\n  width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n}) {\n  return (\n    <EmptyTitle className={className} {...props}>\n      <Text width={width} size=\"lg\" emphasis=\"primary\" />\n    </EmptyTitle>\n  )\n}\n\nfunction EmptyDescriptionWireframe({\n  width = 'lg',\n  className,\n  ...props\n}: Omit<React.ComponentProps<'p'>, 'children'> & {\n  width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full'\n}) {\n  return (\n    <EmptyDescription className={className} {...props}>\n      <Text width={width} size=\"sm\" color=\"muted\" />\n    </EmptyDescription>\n  )\n}\n\nfunction EmptyMediaWireframe({\n  variant = 'icon',\n  className,\n  ...props\n}: Omit<React.ComponentProps<'div'>, 'children'> & VariantProps<typeof emptyMediaVariants>) {\n  return (\n    <EmptyMedia variant={variant} className={className} {...props}>\n      <div className=\"wireframe-block size-6\" />\n    </EmptyMedia>\n  )\n}\n\nexport {\n  Empty,\n  EmptyHeader,\n  EmptyTitle,\n  EmptyDescription,\n  EmptyContent,\n  EmptyMedia,\n  EmptyTitleWireframe,\n  EmptyDescriptionWireframe,\n  EmptyMediaWireframe,\n}\n",
      "type": "registry:ui"
    }
  ]
}
